/***************************************************************************//**
* \file ifx_se_crc32.h
* \version 1.1.0
*
* \brief
* Fast high-distance 32-bit CRC for data integrity protection.
*
********************************************************************************
* \copyright
* Copyright 2022-2024, Cypress Semiconductor Corporation (an Infineon company).
* All rights reserved.
* You may use this file only in accordance with the license, terms, conditions,
* disclaimers, and limitations in the end user license agreement accompanying
* the software package with which this file was provided.
*******************************************************************************/

#ifndef IFX_SE_CRC32_H
#define IFX_SE_CRC32_H

#include <stdint.h>
#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** \addtogroup crc32_calc
 * \{
 */

/*
  Implementation of fast 32-bit CRC32d6 generated by
     p(x) = x^32 + x^18 + x^17 + x^15 + x^14 + 1

  Factorization:
     p(x) = (x+1)^2 * (x^30 + x^28 + x^26 + x^24 + x^22 + x^20 + x^18
                       + x^15 + x^12 + x^10 + x^8 + x^6 + x^4 + x^2 + 1)

  Properties:
     min distance  = 6 upto 32770 bit, i.e. 4kiB
     min distance  = 4 upto 65538 bit, i.e. 8kiB
     min distance  = 2 above
     detect all odd bit errors, since all code words have even weight.
     detect all burst errors upto 32 bit length, since code is cyclic.
*/


/** \cond INTERNAL */
#define IFX_CRC32_BYTE_WIDTH    (sizeof(uint8_t) * 8u)
#define IFX_CRC32_WORD_WIDTH    (sizeof(uint16_t) * 8u)
/** \endcond */

/** Size of CRC32 data value in bits */
#define IFX_CRC32_CRC_WIDTH     32u

/** Size of CRC32 data value in bytes */
#define IFX_CRC32_CRC_SIZE      (IFX_CRC32_CRC_WIDTH / 8u)

/** Default initial value to calculate CRC32 */
#define IFX_CRC32_INIT          (0xFFFFFFFFuL)

/**
 * Calculates CRC32 value of the data block
 *
 * \param[in] Q       The pointer to the input data block
 * \param[in] n       The size of data block to calculate CRC32
 *
 * \return            CRC32 value
 */
#define IFX_CRC32_CALC(Q, n)    ifx_se_crc32d6a(n, Q, IFX_CRC32_INIT)

/**
 * Calculates and appends CRC32 value to the and of the data block
 *
 * \param[in] data       The pointer to the input data block
 * \param[in] data_size  The size of actual data to calculate CRC32
 *
 * \note The data buffer MUST be larger than data_size by at least
 *       IFX_CRC32_CRC_SIZE (4 bytes) to save the CRC32 value at the end
 *       of the data block
 */
#define IFX_CRC32_CALC_APPEND(data, data_size)                                 \
   do {                                                                        \
      uint32_t data_crc = IFX_CRC32_CALC((const uint8_t*)(data), (data_size)); \
      memcpy((uint8_t *)(data) + (data_size), &data_crc, sizeof(data_crc));    \
   } while(0)

/*******************************************************************************
 * Function Name: ifx_se_crc32d6_open
 ***************************************************************************//**
 *
 * Used to initialize CRC state P.
 *
 * \param[out] P: The pointer to the CRC32 state variable.
 * \param[in]  init: Initial value for CRC32 calculation
 *
 ******************************************************************************/
void ifx_se_crc32d6_open(uint32_t *P, uint32_t init);

/*******************************************************************************
 * Function Name: ifx_se_crc32d6_close
 ***************************************************************************//**
 *
 * Used to finalize CRC state P and return 32 bit digest.
 *
 * \param[in] P The pointer to the CRC32 state variable.
 *
 * \return      32 bit digest
 *
 ******************************************************************************/
uint32_t ifx_se_crc32d6_close(uint32_t const *P);

/*******************************************************************************
 * Function Name: ifx_se_crc32d6a_update
 ***************************************************************************//**
 *
 * Used to update CRC state P with next message symbol Q.
 *
 * \param[in,out] P: The pointer to the CRC32 state variable.
 * \param[in]     Q: message symbol Q
 *
 ******************************************************************************/
void ifx_se_crc32d6a_update(uint32_t *P, uint8_t Q);

/*******************************************************************************
 * Function Name: ifx_se_crc32d6a
 ***************************************************************************//**
 *
 * Used to calculate 32 bit digest from the message.
 *
 * \param[in] n     The length of the message.
 * \param[in] Q     The pointer to the message.
 * \param[in] init  Initial value for CRC32 calculation.
 *
 * \return          32 bit digest
 *
 ******************************************************************************/
uint32_t ifx_se_crc32d6a(size_t n, uint8_t const *Q, uint32_t init);

/*******************************************************************************
 * Function Name: ifx_se_crc32d6b_update
 ***************************************************************************//**
 *
 * Used to update CRC state P with next 16-bit message symbol Q.
 *
 * \param[in,out] P: The pointer to the CRC32 state variable.
 * \param[in]     Q: message symbol Q (16-bit)
 *
 ******************************************************************************/
void ifx_se_crc32d6b_update(uint32_t *P, uint16_t Q);

/*******************************************************************************
 * Function Name: ifx_se_crc32d6a
 ***************************************************************************//**
 *
 * Used to calculate 32 bit digest from the 16-bit symbol message.
 *
 * \param[in] n     The length of the message.
 * \param[in] Q     The pointer to the message.
 * \param[in] init  Initial value for CRC32 calculation.
 *
 * \return          32 bit digest
 *
 ******************************************************************************/
uint32_t ifx_se_crc32d6b(size_t n, uint16_t const *Q, uint32_t init);

/** \} */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* IFX_SE_CRC32_H */
