<?xml version="1.0" encoding="utf-8"?>

<PersonalityTemplate id="security_sau" name="SAU" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v10">
  <Constants>
    <!-- Because ExposedMember paramId cannot be an expression, starts_list and ends_list must be kept in sync with this -->
    <Const id="REGION_COUNT" value="8" />
  </Constants>
  <FittingRules>
    <MappingRules>
      <IpBlock name="m33syscpuss" />
      <Resource name="(m33syscpuss|m55appcpuss)\.(cm33|cm55)\.sau" />
      <OperatingMode value="MCU" />
    </MappingRules>
  </FittingRules>
  <ExposedMembers>
    <ExposedMember key="name$idx" paramId="name$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="enable$idx" paramId="enable$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="base_addr$idx" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="end_addr$idx" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="access$idx" paramId="access$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="cores" paramId="cores" />

    <!-- starts_through# and ends_through# are generated recursively, with each building on the previous one.  We only want to expose the last one that contains everything. -->
    <ExposedMember key="starts_list" paramId="starts_through7" />
    <ExposedMember key="ends_list" paramId="ends_through7" />
  </ExposedMembers>
  <Parameters>
    <ParamDoc id="doc" name="CMSIS Help" group="Overview" default="https://arm-software.github.io/CMSIS_5/5.8.0/Core/html/group__sau__trustzone__functions.html" linkText="Open CMSIS IDAU/SAU Documentation" visible="true" desc="Open CMSIS IDAU/SAU Documentation" />
    <ParamDoc id="doc_api" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/pdl/html/page_prot_person.html" linkText="Open Personality Documentation" visible="true" desc="Open Personality Documentation" />

    <ParamString id="cores" default="`${createCoreDefine(getBlockType(1), getInstNumber(getBlockType(1)), &quot;&quot;)}`" editable="false" visible="false" desc="comma separated list" group="" name="cores" />

    <Repeat count="$REGION_COUNT">
      <ParamString id="name$idx" default="SAU region $idx" editable="false" visible="false" desc="" group="" name="" />
      <ParamBool id="enable$idx" name="`${name$idx}`" group="" default="false" visible="true" editable="true" desc="Should the SAU region be enabled?" />
      <ParamRange id="base_addr$idx" name="Base Address" group="`${name$idx}`" default="0x00000000" min="0" max="4294967264" resolution="32" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Base address of `${name$idx}`." />
      <ParamRange id="end_addr$idx" name="End Address" group="`${name$idx}`" default="0x00100000" min="32" max="4294967295" resolution="32" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Size of `${name$idx}`." />
      <ParamRange id="size$idx" name="Size" group="`${name$idx}`" default="`${toHex(end_addr$idx - base_addr$idx)}`" min="32" max="4294967295" resolution="32" visible="false" editable="false" desc="Size of `${name$idx}`." />
      <ParamChoice id="access$idx" name="Access" group="`${name$idx}`" default="1" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="What type of protection is needed?  All memory not in a SAU region is Secure.">
        <Entry name="Non-Secure" value="1" visible="true" />
        <Entry name="Non-Secure Callable" value="3" visible="true" />
      </ParamChoice>
      <ParamString id="prev_starts_through$idx" default="`${($idx == 0) ? &quot;&quot; : getParamValue(&quot;starts_through&quot; . ($idx-1))}`" editable="false" visible="false" desc="" group="" name="" />
      <ParamString id="starts_through$idx" default="`${enable$idx ? prev_starts_through$idx . splitSeparator() . base_addr$idx : prev_starts_through$idx}`" editable="false" visible="false" desc="" group="" name="" />
      <ParamString id="prev_ends_through$idx" default="`${($idx == 0) ? &quot;&quot; : getParamValue(&quot;ends_through&quot; . ($idx-1))}`" editable="false" visible="false" desc="" group="" name="" />
      <ParamString id="ends_through$idx" default="`${enable$idx ? prev_ends_through$idx . splitSeparator() . end_addr$idx : prev_ends_through$idx}`" editable="false" visible="false" desc="" group="" name="" />
    </Repeat>
    <ParamString id="enabled_num" default="`${((enable0) ? 1 : 0) + ((enable1) ? 1 : 0) + ((enable2) ? 1 : 0) + ((enable3) ? 1 : 0) + ((enable4) ? 1 : 0) + ((enable5) ? 1 : 0) + ((enable6) ? 1 : 0) + ((enable7) ? 1 : 0)}`" editable="false" visible="false" desc="" group="" name="" />
  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="SAU region $idx has an End Address lower than its Base Address." condition="`${enable$idx &amp;&amp; (end_addr$idx &lt; base_addr$idx)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 0." condition="`${($idx != 0) &amp;&amp; enable$idx &amp;&amp; enable0 &amp;&amp; (base_addr0 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr0)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 0." condition="`${($idx != 0) &amp;&amp; enable$idx &amp;&amp; enable0 &amp;&amp; (base_addr0 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr0)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 1." condition="`${($idx != 1) &amp;&amp; enable$idx &amp;&amp; enable1 &amp;&amp; (base_addr1 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr1)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 1." condition="`${($idx != 1) &amp;&amp; enable$idx &amp;&amp; enable1 &amp;&amp; (base_addr1 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr1)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 2." condition="`${($idx != 2) &amp;&amp; enable$idx &amp;&amp; enable2 &amp;&amp; (base_addr2 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr2)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 2." condition="`${($idx != 2) &amp;&amp; enable$idx &amp;&amp; enable2 &amp;&amp; (base_addr2 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr2)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 3." condition="`${($idx != 3) &amp;&amp; enable$idx &amp;&amp; enable3 &amp;&amp; (base_addr3 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr3)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 3." condition="`${($idx != 3) &amp;&amp; enable$idx &amp;&amp; enable3 &amp;&amp; (base_addr3 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr3)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 4." condition="`${($idx != 4) &amp;&amp; enable$idx &amp;&amp; enable4 &amp;&amp; (base_addr4 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt;= end_addr4)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 4." condition="`${($idx != 4) &amp;&amp; enable$idx &amp;&amp; enable4 &amp;&amp; (base_addr4 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr4)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 5." condition="`${($idx != 5) &amp;&amp; enable$idx &amp;&amp; enable5 &amp;&amp; (base_addr5 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr5)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 5." condition="`${($idx != 5) &amp;&amp; enable$idx &amp;&amp; enable5 &amp;&amp; (base_addr5 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr5)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 6." condition="`${($idx != 6) &amp;&amp; enable$idx &amp;&amp; enable6 &amp;&amp; (base_addr6 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr6)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 6." condition="`${($idx != 6) &amp;&amp; enable$idx &amp;&amp; enable6 &amp;&amp; (base_addr6 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr6)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has a Base Address inside SAU region 7." condition="`${($idx != 7) &amp;&amp; enable$idx &amp;&amp; enable7 &amp;&amp; (base_addr7 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr7)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="SAU region $idx has an End Address inside SAU region 7." condition="`${($idx != 7) &amp;&amp; enable$idx &amp;&amp; enable7 &amp;&amp; (base_addr7 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr7)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
  </DRCs>

  <!-- Generated firmware -->
  <ConfigFirmware>
  <ConfigFile repeatCount="1" name="cycfg_sau.h">
    <Line value="/* This file is automatically generated. */"/>
    <Line value="#if !defined(CY_CYCFG_SAU_H)"/>
    <Line value="#define CY_CYCFG_SAU_H"/>
    <Line value="#include &quot;cmsis_compiler.h&quot;"/>
    <Line value="#include &quot;cy_device.h&quot;"/>
    <Line value=""/>
    <Line value="#ifdef CY_PDL_TZ_ENABLED"/>
    <Line value=""/>
    <Line value="#define CY_SAU_REGION_CNT      (`${enabled_num}`U)"/>
    <Line value=""/>
    <Line value="typedef struct {"/>
    <Line value="    uint8_t     reg_num;  /* Region number. */"/>
    <Line value="    uint32_t    base_addr;/* Base address of SAU region. */"/>
    <Line value="    uint32_t    size;     /* Size of SAU region. */"/>
    <Line value="    bool        nsc;      /* Is this region Non-Secure Callable? */"/>
    <Line value="} cy_sau_config_t; "/>
    <Line value=""/>
    <Line value=""/>
    <Line value="void Cy_SauInit(void);"/>
    <Line value="extern const cy_sau_config_t SAU_config[CY_SAU_REGION_CNT];"/>
    <Line value=""/>
    <Line value="#endif /* #ifdef CY_PDL_TZ_ENABLED */"/>
    <Line value="#endif /* #if !defined(CY_CYCFG_SAU_H) */"/>
    <Line value=""/>


  </ConfigFile>

  <ConfigFile repeatCount="1" name="cycfg_sau.c">
    <Line value="/* This file is automatically generated. */"/>
    <Line value=""/>
    <Line value="#include &quot;cycfg_sau.h&quot;"/>
    <Line value=""/>
    <Line value="#ifdef CY_PDL_TZ_ENABLED"/>
    <Line value=""/>
    <Line value="const cy_sau_config_t SAU_config[CY_SAU_REGION_CNT];" include="`${!(enabled_num &gt; 0)}`"/>
    <Line value="const cy_sau_config_t SAU_config[CY_SAU_REGION_CNT] = " include="`${(enabled_num &gt; 0)}`"/>
    <Line value="{" include="`${(enabled_num &gt; 0)}`"/>
    <Repeat repeatCount="$REGION_COUNT">
      <Line value="    {" include="`${((enabled_num &gt; 0) &amp;&amp; (enable$idx eq true))}`"/>
      <Line value="        .reg_num = $idxU," include="`${(enable$idx eq true)}`"/>
      <Line value="        .base_addr = `${base_addr$idx}`U," include="`${(enable$idx eq true)}`"/>
      <Line value="        .size = `${size$idx}`U," include="`${(enable$idx eq true)}`"/>
      <Line value="        .nsc = false," include="`${((enable$idx eq true) &amp;&amp; (access$idx eq 1))}`"/>
      <Line value="        .nsc = true," include="`${((enable$idx eq true) &amp;&amp; (access$idx eq 3))}`"/>
      <Line value="    }," include="`${((enabled_num &gt; 0) &amp;&amp; (enable$idx eq true))}`"/>
    </Repeat>
    <Line value="};" include="`${(enabled_num &gt; 0)}`"/>
    <Line value=""/>
    <Line value="void Cy_SauInit(void)"/>
    <Line value="{"/>
    <Line value="    SAU-&gt;CTRL |= SAU_CTRL_ENABLE_Msk;" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="    for (uint8_t i = 0U ; i &lt; CY_SAU_REGION_CNT ; i++)" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="    {" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="        SAU-&gt;RNR = SAU_config[i].reg_num;" include="`${(enable$idx eq true)}`"/>
    <Line value="        SAU-&gt;RBAR = (SAU_config[i].base_addr &amp; SAU_RBAR_BADDR_Msk);" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="        SAU-&gt;RLAR = (((SAU_config[i].base_addr + SAU_config[i].size - 1U) &amp; SAU_RLAR_LADDR_Msk) | \" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="            (SAU_config[i].nsc ? SAU_RLAR_NSC_Msk : 0U) | SAU_RLAR_ENABLE_Msk);" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="    }" include="`${(enabled_num &gt; 0)}`"/>
    <Line value="}"/>
    <Line value=""/>
    <Line value="#endif /* #ifdef CY_PDL_TZ_ENABLED */"/>
    <Line value=""/>
  </ConfigFile>

    </ConfigFirmware>
</PersonalityTemplate>
