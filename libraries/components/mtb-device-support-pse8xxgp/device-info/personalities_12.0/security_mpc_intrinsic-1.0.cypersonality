<?xml version="1.0" encoding="utf-8"?>
<!-- This personality implies that there are 6 MPC controllers and SMIF memory is accessible via 2 MPC controllers. -->
<PersonalityTemplate id="mpc_intrinsic" name="MPC TopLevel" intrinsic="true" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v10">
  <FittingRules>
    <MappingRules>
      <IpBlock name="VirtualResource">
        <Param name="HAS_MEMORY_DATA" value="1" />
      </IpBlock>

      <Resource name="vres\.security\.mpc" />
      <OperatingMode value="MCU" />
    </MappingRules>
  </FittingRules>

  <ExposedMembers>
  </ExposedMembers>

  <Parameters>
  </Parameters>

  <ConfigFirmware>
  <ConfigInclude value="cy_mpc.h" include="`${isBlockUsed(&quot;vres[0].memory[0]&quot;)}`" />
  <ConfigInclude value="cycfg_memory.h" include="`${isBlockUsed(&quot;vres[0].memory[0]&quot;)}`" />
  <ConfigInclude value="cycfg_mpc.h" include="`${isBlockUsed(&quot;vres[0].memory[0]&quot;)}`" />

  <ConfigArray name="cy_mpc_unified_config" type="cy_complete_mpc_config_t" const="true" public="true"
    include="`${(isBlockUsed(&quot;rramc[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;rramc[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
      (isBlockUsed(&quot;smif[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;smif[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
      (isBlockUsed(&quot;smif[1].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;smif[1].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
      (isBlockUsed(&quot;socmem[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;socmem[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
      (isBlockUsed(&quot;mxsramc[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;mxsramc[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
      (isBlockUsed(&quot;mxsramc[1].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;mxsramc[1].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0))}`"
    guard="defined (CY_PDL_TZ_ENABLED)">
    <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ (isBlockUsed(&quot;rramc[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;rramc[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) }`" >
        <Member name="config" value="`${getExposedMember(&quot;rramc[0].mpc[0]&quot;, &quot;block_name&quot;) . &quot;_config2&quot;}`" />
        <Member name="size" value="`${getExposedMember(&quot;rramc[0].mpc[0]&quot;, &quot;range_count&quot;)}`U" />
        <Member name="response" value="`${((getExposedMember(&quot;rramc[0].mpc[0]&quot;, &quot;response&quot;) eq &quot;CY_PPC_RZWI&quot;) ? false : true)}`" />
    </ConfigStruct>
    <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ (isBlockUsed(&quot;smif[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;smif[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) }`" >
        <Member name="config" value="`${getExposedMember(&quot;smif[0].mpc[0]&quot;, &quot;block_name&quot;) . &quot;_config2&quot;}`" />
        <Member name="size" value="`${getExposedMember(&quot;smif[0].mpc[0]&quot;, &quot;range_count&quot;) * 2}`U" />
        <Member name="response" value="`${((getExposedMember(&quot;smif[0].mpc[0]&quot;, &quot;response&quot;) eq &quot;CY_PPC_RZWI&quot;) ? false : true)}`" />
    </ConfigStruct>
    <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ (isBlockUsed(&quot;smif[1].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;smif[1].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) }`" >
        <Member name="config" value="`${getExposedMember(&quot;smif[1].mpc[0]&quot;, &quot;block_name&quot;) . &quot;_config2&quot;}`" />
        <Member name="size" value="`${getExposedMember(&quot;smif[1].mpc[0]&quot;, &quot;range_count&quot;) * 2}`U" />
        <Member name="response" value="`${((getExposedMember(&quot;smif[1].mpc[0]&quot;, &quot;response&quot;) eq &quot;CY_PPC_RZWI&quot;) ? false : true)}`" />
    </ConfigStruct>
    <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ (isBlockUsed(&quot;socmem[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;socmem[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) }`" >
        <Member name="config" value="`${getExposedMember(&quot;socmem[0].mpc[0]&quot;, &quot;block_name&quot;) . &quot;_config2&quot;}`" />
        <Member name="size" value="`${getExposedMember(&quot;socmem[0].mpc[0]&quot;, &quot;range_count&quot;)}`U" />
        <Member name="response" value="`${((getExposedMember(&quot;socmem[0].mpc[0]&quot;, &quot;response&quot;) eq &quot;CY_PPC_RZWI&quot;) ? false : true)}`" />
    </ConfigStruct>
    <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ (isBlockUsed(&quot;mxsramc[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;mxsramc[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) }`" >
        <Member name="config" value="`${getExposedMember(&quot;mxsramc[0].mpc[0]&quot;, &quot;block_name&quot;) . &quot;_config2&quot;}`" />
        <Member name="size" value="`${getExposedMember(&quot;mxsramc[0].mpc[0]&quot;, &quot;range_count&quot;)}`U" />
        <Member name="response" value="`${((getExposedMember(&quot;mxsramc[0].mpc[0]&quot;, &quot;response&quot;) eq &quot;CY_PPC_RZWI&quot;) ? false : true)}`" />
    </ConfigStruct>
    <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ (isBlockUsed(&quot;mxsramc[1].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;mxsramc[1].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) }`" >
        <Member name="config" value="`${getExposedMember(&quot;mxsramc[1].mpc[0]&quot;, &quot;block_name&quot;) . &quot;_config2&quot;}`" />
        <Member name="size" value="`${getExposedMember(&quot;mxsramc[1].mpc[0]&quot;, &quot;range_count&quot;)}`U" />
        <Member name="response" value="`${((getExposedMember(&quot;mxsramc[1].mpc[0]&quot;, &quot;response&quot;) eq &quot;CY_PPC_RZWI&quot;) ? false : true)}`" />
    </ConfigStruct>
  </ConfigArray>

  <ConfigVariable name="cy_mpc_unified_config_count" type="size_t" const="true" value="sizeof(cy_mpc_unified_config) / sizeof(cy_complete_mpc_config_t)" public="true"
      include="`${(isBlockUsed(&quot;rramc[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;rramc[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
        (isBlockUsed(&quot;smif[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;smif[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
        (isBlockUsed(&quot;smif[1].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;smif[1].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
        (isBlockUsed(&quot;socmem[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;socmem[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
        (isBlockUsed(&quot;mxsramc[0].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;mxsramc[0].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0)) ||
        (isBlockUsed(&quot;mxsramc[1].mpc[0]&quot;) &amp;&amp; (getExposedMember(&quot;mxsramc[1].mpc[0]&quot;, &quot;range_count&quot;) &gt; 0))}`"
      guard="defined (CY_PDL_TZ_ENABLED)" />

  <ConfigFile repeatCount="1" name="cycfg_mpc.h" include="`${isBlockUsed(&quot;vres[0].memory[0]&quot;)}`">
    <Line value="/* This file is automatically generated. */"/>
    <Line value="#ifndef CYCFG_MPC_H"/>
    <Line value="#define CYCFG_MPC_H"/>
    <Line value="#include &lt;stdbool.h&gt;"/>
    <Line value="#include &lt;stdint.h&gt;"/>
    <Line value="#include &quot;cy_device.h&quot;"/>
    <Line value="#include &quot;cy_mpc.h&quot;"/>
    <Line value=""/>
    <Line value=""/>
    <Line value="/** MPC region configuration structure */"/>
    <Line value="typedef struct {"/>
    <Line value="    MPC_Type*          base;          /**&lt; Address of the MPC controller */"/>
    <Line value="    uint32_t           offset;        /**&lt; Region offset within block */"/>
    <Line value="    uint32_t           size;          /**&lt; Region size */"/>
    <Line value="    cy_en_mpc_size_t   regionSize;    /**&lt; MPC protection region size */"/>
    <Line value="    uint32_t           ns_mask;       /**&lt; NS bit mask for each PC */"/>
    <Line value="    uint32_t           r_mask;        /**&lt; R  bit mask for each PC */"/>
    <Line value="    uint32_t           w_mask;        /**&lt; W  bit mask for each PC */"/>
    <Line value="} cy_mpc_regions_config_2_t;"/>
    <Line value=""/>
    <Line value=""/>
    <Line value="/** Full MPC settings structure */"/>
    <Line value="typedef struct {"/>
    <Line value="    const cy_mpc_regions_config_2_t* config;    /**&lt; Pointer to the settings array */"/>
    <Line value="    uint8_t size;                               /**&lt; Array size */"/>
    <Line value="    bool response;                              /**&lt; MPC response on access violation */"/>
    <Line value="} cy_complete_mpc_config_t;"/>
    <Line value=""/>
    <Line value="#endif /* #ifndef CYCFG_MPC_H */" />
  </ConfigFile>

  </ConfigFirmware>
</PersonalityTemplate>
