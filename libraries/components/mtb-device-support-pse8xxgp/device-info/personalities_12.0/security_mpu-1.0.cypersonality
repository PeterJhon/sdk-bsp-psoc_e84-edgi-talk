<?xml version="1.0" encoding="utf-8"?>

<PersonalityTemplate id="security_mpu" name="MPU" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v10">
  <Constants>
    <Const id="REGION_COUNT" value="8" />
  </Constants>
  <FittingRules>
    <MappingRules>
      <IpBlock name="m33syscpuss,m55appcpuss" />
      <Resource name="(m33syscpuss|m55appcpuss).(cm33|cm55).(mpu_ns|mpu_s)" />
      <OperatingMode value="MCU" />
    </MappingRules>
  </FittingRules>
  <ExposedMembers>
    <ExposedMember key="name$idx" paramId="name$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="enable$idx" paramId="enable$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="base_addr$idx" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="end_addr$idx" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <ExposedMember key="cores" paramId="cores" />
  </ExposedMembers>
  <Parameters>
    <ParamDoc id="doc" name="CMSIS Help" group="Overview" default="https://arm-software.github.io/CMSIS_5/5.8.0/Core/html/group__mpu8__functions.html" linkText="Open MPU CMSIS Documentation" visible="true" desc="Open MPU CMSIS Documentation" />
    <ParamDoc id="doc_api" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/pdl/html/page_prot_person.html" linkText="Open Personality Documentation" visible="true" desc="Open Personality Documentation" />

    <Repeat count="$REGION_COUNT">
      <ParamString id="name$idx" default="`${getBlockDisplayName(INST_LOC, false) . &quot; Region $idx&quot;}`" editable="false" visible="false" desc="" group="" name="" />
      <ParamString id="shortname$idx" default="MPU region $idx" editable="false" visible="false" desc="" group="" name="" />
      <ParamBool id="enable$idx" name="`${shortname$idx}`" group="" default="false" visible="true" editable="true" desc="Should the MPU region region be enabled?" />
      <ParamString id="base_addr$idx" name="Base Address" group="`${shortname$idx}`" default="0x00000000" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Base address of MPU region region $idx." />
      <ParamString id="end_addr$idx" name="End Address" group="`${shortname$idx}`" default="`${toHex(1048576, 8)}`" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Size of MPU region region $idx." />
      <ParamBool id="privileged$idx" name="Privileged Access Only" group="`${shortname$idx}`" default="false" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Are these memory locations only accessible to privileged callers?" />
      <ParamBool id="writable$idx" name="Writable" group="`${shortname$idx}`" default="true" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Are these memory locations writable?" />
      <ParamBool id="executable$idx" name="Executable" group="`${shortname$idx}`" default="false" visible="`${enable$idx}`" editable="`${enable$idx}`" desc="Are these memory locations executable?" />
      <ParamBool id="device$idx" name="Device Memory" group="`${shortname$idx}`" default="false" visible="`${enable$idx &amp;&amp; (!(getBlockType(1) eq &quot;cm33&quot;))}`" editable="true" desc="Is this memory used for peripheral control registers?" />
      <ParamChoice id="cacheable$idx" name="Cacheable" group="`${shortname$idx}`" default="4" visible="`${(enable$idx &amp;&amp; !device$idx) &amp;&amp; (!(getBlockType(1) eq &quot;cm33&quot;))}`" editable="true" desc="Can these memory locations be cached? Applies to both inner and outer.">
        <Entry name="Non-Cacheable" value="4" visible="true" />
        <Entry name="Write-Back Non-Transient" value="15" visible="true" />
        <Entry name="Write-Back Transient" value="7" visible="true" />
        <Entry name="Write-Through Non-Transient" value="11" visible="true" />
        <Entry name="Write-Through Transient" value="3" visible="true" />
      </ParamChoice>

      <ParamChoice id="devMemAttr$idx" name="Memory attibutes" group="`${shortname$idx}`" default="0" visible="`${(enable$idx &amp;&amp; device$idx) &amp;&amp; (!(getBlockType(1) eq &quot;cm33&quot;))}`" editable="true" desc="The memory attributes for Device.">
        <Entry name="Device-nGnRnE" value="0" visible="true" />
        <Entry name="Device-nGnRE" value="1" visible="true" />
        <Entry name="Device-nGRE" value="2" visible="true" />
        <Entry name="Device-GRE" value="3" visible="true" />
      </ParamChoice>

      <ParamString id="ap$idx" default="`${(((writable$idx eq false) &amp;&amp; (privileged$idx eq false)) ? (3) : (((writable$idx eq true) &amp;&amp; (privileged$idx eq false)) ? (1) : (((writable$idx eq false) &amp;&amp; (privileged$idx eq true)) ? (2) : (((writable$idx eq true) &amp;&amp; (privileged$idx eq true)) ? (0) : (5)))))}`" editable="false" visible="false" desc="" group="" name="" />
    </Repeat>
    <ParamString id="enabled_num" default="`${((enable0) ? 1 : 0) + ((enable1) ? 1 : 0) + ((enable2) ? 1 : 0) + ((enable3) ? 1 : 0) + ((enable4) ? 1 : 0) + ((enable5) ? 1 : 0) + ((enable6) ? 1 : 0) + ((enable7) ? 1 : 0)}`" editable="false" visible="false" desc="" group="" name="" />
  </Parameters>

  <DRCs>
    <DRC repeatCount="$REGION_COUNT" type="ERROR" paramId="base_addr$idx"
      condition="`${!hasMatch(base_addr$idx, &quot;^(0[Xx][0-9a-fA-F]+|[0-9]+)$&quot;)}`"
      text="'`${base_addr$idx}`' is not a valid number."/>
    <DRC repeatCount="$REGION_COUNT" type="ERROR" paramId="base_addr$idx"
      condition="`${base_addr$idx &lt; 0 | base_addr$idx &gt; 0xFFFFFFFE}`"
      text="'`${base_addr$idx}`' is not within the legal range of [0x00000000-0xfffffffe] for parameter 'base_addr$idx'">
      <FixIt action="SET_PARAM" target="base_addr$idx" value="`${toHex(max(0u, min(base_addr$idx, 0xFFFFFFFEu)), 8)}`" valid="true" />
    </DRC>
    <DRC repeatCount="$REGION_COUNT" type="ERROR" paramId="base_addr$idx"
      condition="`${(cast(uint64, base_addr$idx) % 32u) != 0u}`"
      text="'`${base_addr$idx}`' is not a multiple of 32 (0x20)">
      <FixIt action="SET_PARAM" target="base_addr$idx" value="`${toHex(base_addr$idx &amp; 0xFFFFFFE0u, 8)}`" valid="true" />
    </DRC>
    <DRC repeatCount="$REGION_COUNT" type="ERROR" paramId="end_addr$idx"
      condition="`${!hasMatch(end_addr$idx, &quot;^(0[Xx][0-9a-fA-F]+|[0-9]+)$&quot;)}`"
      text="'`${end_addr$idx}`' is not a valid number."/>
    <DRC repeatCount="$REGION_COUNT" type="ERROR" paramId="end_addr$idx"
      condition="`${end_addr$idx &lt; 0x1F | end_addr$idx &gt; 0xFFFFFFFE}`"
      text="'`${end_addr$idx}`' is not within the legal range of [0x0000001f-0xfffffffe] for parameter 'end_addr$idx'">
      <FixIt action="SET_PARAM" target="end_addr$idx" value="`${toHex(max(0x1Fu, min(end_addr$idx, 0xFFFFFFFEu)), 8)}`" valid="true" />
    </DRC>
    <DRC repeatCount="$REGION_COUNT" type="ERROR" paramId="end_addr$idx"
      condition="`${(cast(uint64, end_addr$idx) % 32u) != 0u}`"
      text="'`${end_addr$idx}`' is not a multiple of 32 (0x20)">
      <FixIt action="SET_PARAM" target="end_addr$idx" value="`${toHex(max(0x20u, end_addr$idx &amp; 0xFFFFFFE0u), 8)}`" valid="true" />
    </DRC>

    <DRC type="ERROR" text="MPU region $idx has an End Address lower than its Base Address." condition="`${enable$idx &amp;&amp; (end_addr$idx &lt; base_addr$idx)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 0." condition="`${($idx != 0) &amp;&amp; enable$idx &amp;&amp; enable0 &amp;&amp; (base_addr0 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr0)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 0." condition="`${($idx != 0) &amp;&amp; enable$idx &amp;&amp; enable0 &amp;&amp; (base_addr0 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr0)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 1." condition="`${($idx != 1) &amp;&amp; enable$idx &amp;&amp; enable1 &amp;&amp; (base_addr1 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr1)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 1." condition="`${($idx != 1) &amp;&amp; enable$idx &amp;&amp; enable1 &amp;&amp; (base_addr1 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr1)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 2." condition="`${($idx != 2) &amp;&amp; enable$idx &amp;&amp; enable2 &amp;&amp; (base_addr2 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr2)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 2." condition="`${($idx != 2) &amp;&amp; enable$idx &amp;&amp; enable2 &amp;&amp; (base_addr2 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr2)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 3." condition="`${($idx != 3) &amp;&amp; enable$idx &amp;&amp; enable3 &amp;&amp; (base_addr3 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr3)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 3." condition="`${($idx != 3) &amp;&amp; enable$idx &amp;&amp; enable3 &amp;&amp; (base_addr3 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr3)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 4." condition="`${($idx != 4) &amp;&amp; enable$idx &amp;&amp; enable4 &amp;&amp; (base_addr4 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt;= end_addr4)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 4." condition="`${($idx != 4) &amp;&amp; enable$idx &amp;&amp; enable4 &amp;&amp; (base_addr4 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr4)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 5." condition="`${($idx != 5) &amp;&amp; enable$idx &amp;&amp; enable5 &amp;&amp; (base_addr5 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr5)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 5." condition="`${($idx != 5) &amp;&amp; enable$idx &amp;&amp; enable5 &amp;&amp; (base_addr5 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr5)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 6." condition="`${($idx != 6) &amp;&amp; enable$idx &amp;&amp; enable6 &amp;&amp; (base_addr6 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr6)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 6." condition="`${($idx != 6) &amp;&amp; enable$idx &amp;&amp; enable6 &amp;&amp; (base_addr6 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr6)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has a Base Address inside MPU region 7." condition="`${($idx != 7) &amp;&amp; enable$idx &amp;&amp; enable7 &amp;&amp; (base_addr7 &lt;= base_addr$idx) &amp;&amp; (base_addr$idx &lt; end_addr7)}`" paramId="base_addr$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPU region $idx has an End Address inside MPU region 7." condition="`${($idx != 7) &amp;&amp; enable$idx &amp;&amp; enable7 &amp;&amp; (base_addr7 &lt; end_addr$idx) &amp;&amp; (end_addr$idx &lt;= end_addr7)}`" paramId="end_addr$idx" repeatCount="$REGION_COUNT" />

  </DRCs>
    <ConfigFirmware>
      <ConfigFile repeatCount="1" name="cycfg_mpu_`${getBlockType(1)}`_`${splitAt(getBlockType(2), 1, &quot;_&quot;)}`_`${getInstNumber(getBlockType(1))}`.c">

        <Line value="/* This file is automatically generated. */"/>
        <Line value="/* `${getBlockType(1)}` MPU configuration. */"/>
        <Line value="#include &lt;stdio.h&gt;"/>
        <Line value="#include &lt;stdint.h&gt;"/>
        <Line value="#include &lt;stddef.h&gt;"/>
        <Line value="#include &quot;cy_sysint.h&quot;"/>
        <Line value="#include &quot;cy_syspm.h&quot;"/>
        <Line value="#include &quot;cy_syslib.h&quot;"/>
        <Line value="#include &quot;cmsis_compiler.h&quot;"/>
        <Line value="#include &quot;armv8m_mpu.h&quot;"/>
        <Line value=" "/>
        <Line value="void Cy_MpuInit_`${getBlockType(1)}`_`${splitAt(getBlockType(2), 1, &quot;_&quot;)}`_`${getInstNumber(getBlockType(1))}`(void)"/>
        <Line value="{"/>
        <Line value="    __DMB();"/>
        <Line value=" "/>
        <Line value="    ARM_MPU_Disable();"/>
        <Line value=" "/>

        <Repeat repeatCount="$REGION_COUNT">
          <Line value="    /* MPU region#$idx */" include="`${(enable$idx eq true)}`"/>
          <Line value="    uint32_t rbarValue$idx = ((`${base_addr$idx}`U &amp; MPU_RBAR_BASE_Msk)                      // Set the base address" include="`${(enable$idx eq true)}`"/>
          <Line value="                          | ((0 &lt;&lt; MPU_RBAR_SH_Pos) &amp; MPU_RBAR_SH_Msk)            // Set Shareability (SH)" include="`${(enable$idx eq true)}`"/>
          <Line value="                          | ((`${ap$idx}` &lt;&lt; MPU_RBAR_AP_Pos) &amp; MPU_RBAR_AP_Msk)            // Set Access Permissions (AP)" include="`${(enable$idx eq true)}`"/>
          <Line value="                          | ((`${executable$idx ? 0 : 1}` &lt;&lt; MPU_RBAR_XN_Pos) &amp; MPU_RBAR_XN_Msk));          // Set Execute Never (XN) bit" include="`${(enable$idx eq true)}`"/>
          <Line value=" " include="`${(enable$idx eq true)}`"/>
          <Line value="    uint32_t rlarValue$idx = ((`${end_addr$idx}`U &amp; MPU_RLAR_LIMIT_Msk)                     // Set the limit address" include="`${(enable$idx eq true)}`"/>
          <Line value="                          | (($idx &lt;&lt; MPU_RLAR_AttrIndx_Pos) &amp; MPU_RLAR_AttrIndx_Msk)// Attribute index" include="`${(enable$idx eq true)}`"/>
          <Line value="                          | (MPU_RLAR_EN_Msk));                                   // Enable bit" include="`${(enable$idx eq true)}`"/>
          <Line value=" " include="`${(enable$idx eq true)}`"/>
          <Line value="    ARM_MPU_SetRegion($idx, rbarValue$idx, rlarValue$idx);" include="`${(enable$idx eq true)}`"/>
          <Line value=" " include="`${(enable$idx eq true)}`"/>
          <Line value="    ARM_MPU_SetMemAttr($idx, ARM_MPU_ATTR(`${cacheable$idx}`U, `${cacheable$idx}`U));" include="`${((enable$idx eq true) &amp;&amp; (device$idx eq false))}`"/>
          <Line value="    ARM_MPU_SetMemAttr($idx, ARM_MPU_ATTR(0U, `${devMemAttr$idx}`U));" include="`${((enable$idx eq true) &amp;&amp; (device$idx eq true))}`"/>
          <Line value=" " include="`${(enable$idx eq true)}`"/>
        </Repeat>
        <Line value=" "/>
        <Line value="    ARM_MPU_Enable(MPU_CTRL_PRIVDEFENA_Msk | MPU_CTRL_ENABLE_Msk);"/>
        <Line value=" "/>
        <Line value="    __DMB();"/>
        <Line value="    __ISB();"/>
        <Line value="}"/>
      </ConfigFile>

    </ConfigFirmware>
</PersonalityTemplate>
