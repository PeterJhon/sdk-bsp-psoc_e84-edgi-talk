<?xml version="1.0" encoding="utf-8"?>
<!-- This personality implies that there are 6 MPC controllers and SMIF memory is accessible via 2 MPC controllers. -->
<PersonalityTemplate id="security_mpc" name="MPC" version="1.1" xmlns="http://cypress.com/xsd/cyhwpersonality_v12">
  <Constants>
    <Const id="REGION_COUNT" value="99" />
    <Const id="DOMAIN_COUNT" value="99" />
    <Const id="PC_REGION_COUNT" value="792" />
    <Const id="PC_COUNT" value="8" />
  </Constants>
  <FittingRules>
    <MappingRules>
      <IpBlock name="mxsramc,mxs22rramc,mxsmif,mxsocmem" />
      <Resource name="(mxsramc|rramc|smif|socmem)\.mpc" />
      <OperatingMode value="MCU"/>
    </MappingRules>
  </FittingRules>
  <BehaviorImplementation>
    <Implements type="mpc_v1">
      <ExposedMember key="range_count" paramId="combined_range_count" />
      <ExposedMember key="start_offset$idx" paramId="combined_start_offset$idx" repeatCount="$REGION_COUNT" />
      <ExposedMember key="end_offset$idx" paramId="combined_end_offset$idx" repeatCount="$REGION_COUNT" />
      <ExposedMember key="security$idx" paramId="combined_security$idx" repeatCount="$REGION_COUNT" />
      <ExposedMember key="security_display$idx" paramId="security_display$idx" repeatCount="$REGION_COUNT" />
      <ExposedMember key="block_name" paramId="block_name" />
      <ExposedMember key="response" paramId="response" />
    </Implements>
  </BehaviorImplementation>
  <Parameters>
    <ParamDoc id="doc" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/pdl/html/group__group__mpc.html" linkText="Open MPC Documentation" visible="true" desc="Open MPC Documentation" />

    <!-- Basic settings -->
    <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
    <ParamChoice id="response" name="Invalid Access Response" group="" default="CY_PPC_RZWI" visible="true" editable="true" desc="What happens if the memory is accessed from a Protection Context (PC) that doesn't have access?">
      <Entry name="Read Zero and Write Ignore" value="CY_PPC_RZWI" visible="true" />
      <Entry name="Bus Error" value="CY_PPC_BUS_ERR" visible="true" />
    </ParamChoice>

    <ParamString id="blockSize" default="`${(lookupExpression(&quot;MPC.BLOCK_SIZE&quot;, 0))}`" visible="false" editable="false" group="" name="" desc="" />
    <ParamString id="blockSizeEnum" default="`${(blockSize eq 0 ? &quot;CY_MPC_SIZE_32B&quot; : (blockSize eq 1 ? &quot;CY_MPC_SIZE_64B&quot; : (blockSize eq 2 ? &quot;CY_MPC_SIZE_128B&quot; : (blockSize eq 3 ? &quot;CY_MPC_SIZE_256B&quot; : (blockSize eq 4 ? &quot;CY_MPC_SIZE_512B&quot; : (blockSize eq 5 ? &quot;CY_MPC_SIZE_1KB&quot; : (blockSize eq 6 ? &quot;CY_MPC_SIZE_2KB&quot; : (blockSize eq 7 ? &quot;CY_MPC_SIZE_4KB&quot; : (blockSize eq 8 ? &quot;CY_MPC_SIZE_8KB&quot; : (blockSize eq 9 ? &quot;CY_MPC_SIZE_16KB&quot; : (blockSize eq 10 ? &quot;CY_MPC_SIZE_32KB&quot; : (blockSize eq 11 ? &quot;CY_MPC_SIZE_64KB&quot; : (blockSize eq 12 ? &quot;CY_MPC_SIZE_128KB&quot; : (blockSize eq 13 ? &quot;CY_MPC_SIZE_256KBv&quot; : (blockSize eq 14 ? &quot;CY_MPC_SIZE_512KB&quot; : (blockSize eq 15 ? &quot;CY_MPC_SIZE_1MB&quot; : &quot;CY_MPC_SIZE_1MB&quot;))))))))))))))))}`" visible="false" editable="false" group="" name="" desc="" />
    <ParamString id="alignment" default="`${(1 &lt;&lt; blockSize) * 32}`" visible="false" editable="false" group="" name="" desc="" />
    <ParamRange id="range_count" name="Range Count" group="" default="0" min="0" max="$REGION_COUNT" resolution="1" visible="false" editable="true" desc="Number of MPC ranges" />
    <ParamString id="combined_start_list" name="combined_start_list" group="" default="`${getMpcRegionStarts(INST_LOC)}`" visible="false" editable="false" desc="" />
    <ParamString id="combined_end_list" name="combined_end_list" group="" default="`${getMpcRegionEnds(INST_LOC)}`" visible="false" editable="false" desc="" />
    <ParamString id="combined_security_list" name="combined_security_list" group="" default="`${getMpcRegionDomainIds(INST_LOC)}`" visible="false" editable="false" desc="" />
    <ParamString id="combined_range_count" name="combined_range_count" group="" default="`${splitCount(combined_start_list)}`" visible="false" editable="false" desc="" />
    <ParamRange id="visible_range_count" name="Range Count" group="" default="`${combined_range_count}`" min="0" max="$REGION_COUNT" resolution="1" visible="true" editable="false" desc="Number of MPC ranges" />
    <Repeat count="$REGION_COUNT">
      <ParamString id="combined_start_offset$idx" name="combined_start$idx" group="Range $idx" default="`${$idx &lt; combined_range_count ? splitAt(combined_start_list, $idx) : 0}`" visible="false" editable="false" desc="" />
      <ParamString id="combined_end_offset$idx" name="combined_end$idx" group="Range $idx" default="`${$idx &lt; combined_range_count ? splitAt(combined_end_list, $idx) : 0}`" visible="false" editable="false" desc="" />
      <ParamString id="combined_security$idx" name="combined_security$idx" group="Range $idx" default="`${$idx &lt; combined_range_count ? splitAt(combined_security_list, $idx) : &quot;&quot;}`" visible="false" editable="false" desc="" />
      <ParamString id="start_offset$idx" name="Start Offset $idx" group="Range $idx" default="0x00000000" visible="false" editable="true" desc="Start of range $idx" />
      <ParamString id="end_offset$idx" name="End Offset $idx" group="Range $idx" default="0x00000000" visible="false" editable="true" desc="End of range $idx" />
      <ParamString id="size$idx" name="Size $idx" group="Range $idx" default="`${toHex(combined_end_offset$idx - combined_start_offset$idx)}`" visible="false" editable="false" desc="End of range $idx" />
      <ParamString id="security$idx" name="Security Settings" group="Range $idx" default="0" visible="false" editable="true" desc="What security settings protect this range?" />
      <ParamString id="security_display$idx" default="`${getOrDefault(getExposedMember(combined_security$idx, &quot;name&quot;),getOrDefault(getBlockDisplayName(combined_security$idx,true),security$idx))}`" visible="false" editable="false" name="" group="" desc="" />

      <ParamString id="visible_start_offset$idx" name="Start Offset $idx" group="Range $idx" default="`${combined_start_offset$idx}`" visible="`${$idx &lt; combined_range_count}`" editable="false" desc="Start of range $idx" />
      <ParamString id="visible_end_offset$idx" name="End Offset $idx" group="Range $idx" default="`${combined_end_offset$idx}`" visible="`${$idx &lt; combined_range_count}`" editable="false" desc="End of range $idx" />
      <ParamString id="visible_security$idx" name="Security Settings" group="Range $idx" default="`${security_display$idx}`" gotoLocationId="`${combined_security$idx}`" visible="`${$idx &lt; combined_range_count}`" editable="false" desc="What security settings protect this range?" />

      <ParamRange id="start_block$idx" name="start_block$idx" group="Range $idx" default="`${combined_start_offset$idx / alignment}`" min="0" max="1000000" resolution="1" visible="false" editable="false" desc="" />
      <ParamRange id="end_block$idx" name="end_block$idx" group="Range $idx" default="`${(combined_end_offset$idx - 1) / alignment}`" min="0" max="1000000" resolution="1" visible="false" editable="false" desc="" />

      <ParamString id="prev_starts_through$idx" default="`${($idx == 0) ? &quot;&quot; : getParamValue(&quot;starts_through&quot; . ($idx-1))}`" editable="false" visible="false" desc="" group="" name="" />
      <ParamString id="starts_through$idx" default="`${($idx &lt; combined_range_count) ? prev_starts_through$idx . splitSeparator() . combined_start_offset$idx : prev_starts_through$idx}`" editable="false" visible="false" desc="" group="" name="starts_through$idx" />
      <ParamString id="prev_ends_through$idx" default="`${($idx == 0) ? &quot;&quot; : getParamValue(&quot;ends_through&quot; . ($idx-1))}`" editable="false" visible="false" desc="" group="" name="" />
      <ParamString id="ends_through$idx" default="`${($idx &lt; combined_range_count) ? prev_ends_through$idx . splitSeparator() . combined_end_offset$idx : prev_ends_through$idx}`" editable="false" visible="false" desc="" group="" name="" />

      <Repeat count="$PC_COUNT">
        <ParamString id="RC$idx{1}PC$idxRD" name="RC$idx{1}PC$idxRD" group="Range $idx{1}" default="`${$idx{1} &lt; combined_range_count ? getExposedMember(combined_security$idx{1}, &quot;mpc_readable$idx&quot;) : false}`" visible="false" editable="false" desc="" />
        <ParamString id="RC$idx{1}PC$idxWR" name="RC$idx{1}PC$idxWR" group="Range $idx{1}" default="`${$idx{1} &lt; combined_range_count ? getExposedMember(combined_security$idx{1}, &quot;mpc_writable$idx&quot;) : false}`" visible="false" editable="false" desc="" />
        <ParamString id="RC$idx{1}PC$idxS" name="RC$idx{1}PC$idxS" group="Range $idx{1}" default="`${$idx{1} &lt; combined_range_count ? getExposedMember(combined_security$idx{1}, &quot;mpc_secure$idx&quot;) : true}`" visible="false" editable="false" desc="" />
        <ParamString id="RC$idx{1}PC$idxSecureAccess" name="RC$idx{1}PC$idxSecureAccess" group="Range $idx{1}" default="`${((RC$idx{1}PC$idxS) ? &quot;CY_MPC_SECURE&quot; : &quot;CY_MPC_NON_SECURE&quot;)}`" visible="false" editable="false" desc="" />
        <ParamString id="RC$idx{1}PC$idxAccess" name="RC$idx{1}PC$idxAccess" group="Range $idx{1}" default="`${((RC$idx{1}PC$idxRD) ? 1 : 0) + ((RC$idx{1}PC$idxWR) ? 2 : 0)}`" visible="false" editable="false" desc="" />
        <ParamString id="RC$idx{1}PC$idxAccessEnum" name="RC$idx{1}PC$idxAccessEnum" group="Range $idx{1}" default="`${((RC$idx{1}PC$idxAccess eq 0 ? &quot;CY_MPC_ACCESS_DISABLED&quot; : (RC$idx{1}PC$idxAccess eq 1 ? &quot;CY_MPC_ACCESS_R&quot; : (RC$idx{1}PC$idxAccess eq 2 ? &quot;CY_MPC_ACCESS_W&quot; : &quot;CY_MPC_ACCESS_RW&quot;)))) }`" visible="false" editable="false" desc="" />
      </Repeat>
    </Repeat>

    <ParamString id="physMemId" default="`${(getBlockType(0) eq &quot;mxsramc&quot;) ? &quot;SRAM&quot; : (getBlockType(0) eq &quot;rramc&quot;) ? &quot;RRAM&quot; : (getBlockType(0) eq &quot;socmem&quot;) ? &quot;SOCMEM_RAM&quot; : &quot;&quot;}`" editable="false" visible="`${debug}`" desc="" group="" name="physMemId" />
    <ParamString id="tcl_drcs" default="`${!isBlockUsed(&quot;m33syscpuss[0].cm33[0].sau[0]&quot;) ? &quot;param:drc_count=0&quot; : (physMemId eq &quot;&quot;) ? &quot;param:drc_count=0&quot; : runTcl(&quot;security_mpc-1.0.tcl&quot;, memoryViewAddresses(physMemId, &quot;CORE_NAME_CM33_0&quot;), getParamValue(&quot;starts_through&quot; . ($REGION_COUNT-1)), getParamValue(&quot;ends_through&quot; . ($REGION_COUNT-1)), &quot;SAU&quot;, getExposedMember(&quot;m33syscpuss[0].cm33[0].sau[0]&quot;, &quot;starts_list&quot;), getExposedMember(&quot;m33syscpuss[0].cm33[0].sau[0]&quot;, &quot;ends_list&quot;))}`" editable="false" visible="false" desc="" group="" name="tclDrcs" />
    <ParamRange id="tcl_drc_count" name="" group="" default="`${getTclVar(&quot;drc_count&quot;, tcl_drcs)}`" min="0" max="32" resolution="1" visible="false" editable="false" desc="" />

    <Repeat count="$PC_REGION_COUNT">
      <ParamString id="Access$idx" default="RC`${$idx / $PC_COUNT}`PC`${$idx % $PC_COUNT}`AccessEnum" editable="false" visible="false" desc="" group="" name="Access" />
      <ParamString id="Secure$idx" default="RC`${$idx / $PC_COUNT}`PC`${$idx % $PC_COUNT}`SecureAccess" editable="false" visible="false" desc="" group="" name="Sec.Access" />
      <ParamString id="PC$idx" default="CY_MPC_PC_`${$idx % $PC_COUNT}`" editable="false" visible="false" desc="" group="" name="PC" />
      <ParamString id="start_offset_m_$idx" default="combined_start_offset`${$idx / $PC_COUNT}`" editable="false" visible="false" desc="" group="" name="StartOffset" />
      <ParamString id="size_m_$idx" default="size`${$idx / $PC_COUNT}`" editable="false" visible="false" desc="" group="" name="Size" />
      <ParamString id="RS$idx" default="blockSizeEnum" editable="false" visible="false" desc="" group="" name="RS" />
    </Repeat>

    <ParamString id="physMemId2" default="`${(getBlockType(0) eq &quot;mxsramc&quot;) ? &quot;SRAM&quot; : (getBlockType(0) eq &quot;rramc&quot;) ? &quot;RRAM&quot; : (getBlockType(0) eq &quot;socmem&quot;) ? &quot;SOCMEM_RAM&quot; : (getBlockType(0) eq &quot;smif&quot;) ? &quot;SMIF&quot; : &quot;&quot;}`" editable="false" visible="`${debug}`" desc="" group="" name="physMemId2" />

    <ParamString id="AccessResponce" default="`${response eq CY_PPC_RZWI ? false : true}`" editable="false" visible="`${debug}`" desc="" group="" name="AccessResponce" />
    <ParamBool id="isRram" name="isRram" group="" default="`${getBlockType(0) eq &quot;rramc&quot;}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isSmif" name="isSmif" group="" default="`${getBlockType(0) eq &quot;smif&quot;}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isSmif0" name="isSmif0" group="" default="`${(getBlockType(0) eq &quot;smif&quot;)&amp;&amp;(getInstNumber(getBlockType(0)) eq 0)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isSmif1" name="isSmif1" group="" default="`${(getBlockType(0) eq &quot;smif&quot;)&amp;&amp;(getInstNumber(getBlockType(0)) eq 1)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isSocmem" name="isSocmem" group="" default="`${getBlockType(0) eq &quot;socmem&quot;}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isSram0" name="isSram0" group="" default="`${(getBlockType(0) eq &quot;mxsramc&quot;)&amp;&amp;(getInstNumber(getBlockType(0)) eq 0)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isSram1" name="isSram1" group="" default="`${(getBlockType(0) eq &quot;mxsramc&quot;)&amp;&amp;(getInstNumber(getBlockType(0)) eq 1)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="block_name" name="block_name" group="" default="`${getBlockType(0)}`_`${getInstNumber(getBlockType(0))}`_`${getBlockType(1)}`_`${getInstNumber(getBlockType(1))}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="RegisterDefine" name="RegisterDefine" group="" default="`${
      (isRram ? &quot;NULL&quot; :
      (isSmif0 ? &quot;(MPC_Type*)SMIF0_CACHE_BLOCK_CACHEBLK_AHB_MPC0&quot; :
      (isSmif1 ? &quot;(MPC_Type*)SMIF1_CACHE_BLOCK_CACHEBLK_AHB_MPC0&quot; :
      (isSocmem ? &quot;(MPC_Type*)SOCMEM_SRAM_MPC0&quot; :
      (isSram0 ? &quot;(MPC_Type*)RAMC0_MPC0&quot; :
      (isSram1 ? &quot;(MPC_Type*)RAMC1_MPC0&quot; : &quot;NULL&quot;
      ))))))}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="RegisterDefine2" name="RegisterDefine2" group="" default="`${
      (isRram ? &quot;NULL&quot; :
      (isSmif0 ? &quot;(MPC_Type*)SMIF0_CORE_AXI_MPC0&quot; :
      (isSmif1 ? &quot;(MPC_Type*)SMIF1_CORE_AXI_MPC0&quot; :
      (isSocmem ? &quot;NULL&quot; :
      (isSram0 ? &quot;NULL&quot; :
      (isSram1 ? &quot;NULL&quot; : &quot;NULL&quot;
      ))))))}`" visible="`${debug}`" editable="false" desc="" />
  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="MPC region `${$idx}` start offset not aligned to MPC block size (`${toHex(alignment)}`)" condition="`${((visible_start_offset$idx % alignment != 0) &amp;&amp; (range_count > $idx))}`" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="MPC region `${$idx}` end offset not aligned to MPC block size (`${toHex(alignment)}`)" condition="`${((visible_end_offset$idx % alignment != 0) &amp;&amp; (range_count > $idx))}`" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="`${getOrDefault(getTclVar(&quot;drc$idx&quot;, tcl_drcs), &quot;&quot;)}`" condition="`${$idx &lt; tcl_drc_count}`" repeatCount="32" />
    <DRC type="ERROR" text="Invalid 'Range $idx' start offset. The value must be greater than or equal to 0x00000000. Use the Memory Regions tab to adjust the memory regions allocated to this MPC." condition="`${$idx &lt; combined_range_count &amp;&amp; combined_start_offset$idx &lt; 0}`" paramId="visible_start_offset$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="Invalid 'Range $idx' start offset. The value must be less than 0xFFFFE000. Use the Memory Regions tab to adjust the memory regions allocated to this MPC." condition="`${$idx &lt; combined_range_count &amp;&amp; combined_start_offset$idx &gt; 4294959104}`" paramId="visible_start_offset$idx" repeatCount="$REGION_COUNT" />
    <DRC type="WARNING" text="MPC ranges `${$idx - 1}` and $idx do not have the same memory protection settings and share an MPC block because their border is not aligned to `${toHex(alignment,8)}`. Use the Memory Regions tab to adjust the memory regions allocated to this MPC." condition="`${($idx &gt; 0) &amp;&amp; ($idx &lt; combined_range_count) &amp;&amp; (getParamValue(&quot;end_block&quot; . ($idx-1)) == start_block$idx) &amp;&amp; (getExposedMember(getParamValue(&quot;combined_security&quot; . ($idx-1)), &quot;numeric&quot;) != getExposedMember(combined_security$idx, &quot;numeric&quot;))}`" paramId = "visible_start_offset$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="Invalid 'Range $idx' end offset. The value must be greater than or equal to 0x00000000. Use the Memory Regions tab to adjust the memory regions allocated to this MPC." condition="`${$idx &lt; combined_range_count &amp;&amp; combined_end_offset$idx &lt; 0}`" paramId="visible_end_offset$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="Invalid 'Range $idx' end offset. The value must be less than 0xFFFFE000. Use the Memory Regions tab to adjust the memory regions allocated to this MPC." condition="`${$idx &lt; combined_range_count &amp;&amp; combined_end_offset$idx &gt; 4294959104}`" paramId="visible_end_offset$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="Invalid 'Range $idx' size. The range size must be greater than or equal to 0x00000000. Use the Memory Regions tab to adjust the memory regions allocated to this MPC." condition="`${$idx &lt; combined_range_count &amp;&amp; size$idx &lt; 0}`" paramId="visible_end_offset$idx" repeatCount="$REGION_COUNT" />
    <DRC type="ERROR" text="`${security_display$idx}` is used but not enabled." condition="`${$idx &lt; combined_range_count &amp;&amp; isBlockUsed(combined_security$idx) == false}`" paramId="visible_security$idx" repeatCount="$REGION_COUNT" />
  </DRCs>

  <!-- Generated firmware -->
  <ConfigFirmware>

      <ConfigInclude value="cy_mpc.h" include="true" />
      <ConfigInclude value="cycfg_mpc.h" include="true" />
      <ConfigInclude value="ifx_se_platform.h" include="`${isRram}`" guard="defined (CY_PDL_TZ_ENABLED) &amp;&amp; !defined(CYBSP_SKIP_MPC_INIT)" />
      <ConfigInclude value="cycfg_mpc.h" include="true" />


      <ConfigDefine name="`${block_name}`_RESPONCE" value="`${AccessResponce}`" public="true" include="true" />

      <ConfigDefine name="`${block_name}`_REGION_NUMBER_ES" value="`${isSmif ? (combined_range_count * 2) : (combined_range_count)}`U" public="true" include="true" />

      <ConfigDefine name="`${block_name}`_REGION_NUMBER" value="`${(combined_range_count * $PC_COUNT)}`U" public="true" include="true" />

        <!-- For != RRAM memory regions -->
        <ConfigArray name="`${block_name}`_config" type="cy_stc_mpc_rot_cfg_t" const="true" public="true" include="`${((combined_range_count &gt; 0) &amp;&amp; !(isRram))}`" arraySize="`${block_name}`_REGION_NUMBER" >
          <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${(((combined_range_count * $PC_COUNT) &gt; $idx{0} ) &amp;&amp; !(isRram))}`" repeatCount="$PC_REGION_COUNT" >
            <Member name="addrOffset" value="`${getParamValue(start_offset_m_$idx{0})}`U" />
            <Member name="size"   value="`${getParamValue(size_m_$idx{0})}`U" />
            <Member name="access" value="`${getParamValue(Access$idx{0})}`" />
            <Member name="secure" value="`${getParamValue(Secure$idx{0})}`" />
            <Member name="pc" value="`${PC$idx{0}}`" />
            <Member name="regionSize" value="`${getParamValue(RS$idx{0})}`" />
          </ConfigStruct>
        </ConfigArray>
        <!-- For RRAM memory regions old style generation in case init is done by BSP  -->
        <ConfigArray name="`${block_name}`_config" type="ifx_se_mpc_rot_cfg_t" const="true" public="true" include="`${((combined_range_count &gt; 0) &amp;&amp; (isRram eq true))}`" arraySize="`${block_name}`_REGION_NUMBER" guard="defined (CY_PDL_TZ_ENABLED) &amp;&amp; !defined(CYBSP_SKIP_MPC_INIT)">
          <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${(((combined_range_count * $PC_COUNT) &gt; $idx{0} ) &amp;&amp; (isRram eq true))}`" repeatCount="$PC_REGION_COUNT">
            <Member name="addr_offset" value="`${getParamValue(start_offset_m_$idx{0})}`U" />
            <Member name="size"   value="`${getParamValue(size_m_$idx{0})}`U" />
            <Member name="access" value="`${getParamValue(Access$idx{0})}`" />
            <Member name="secure" value="`${getParamValue(Secure$idx{0})}`" />
            <Member name="pc" value="`${PC$idx{0}}`" />
            <Member name="region_size" value="`${getParamValue(RS$idx{0})}`" />
          </ConfigStruct>
        </ConfigArray>

        <ConfigArray name="`${block_name}`_config2" type="cy_mpc_regions_config_2_t" const="true" public="true" include="`${(isBlockUsed(&quot;vres[0].memory[0]&quot;) &amp;&amp; (combined_range_count &gt; 0))}`" arraySize="`${(isSmif ? visible_range_count * 2 : visible_range_count)}`" guard="defined (CY_PDL_TZ_ENABLED)">
          <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${((combined_range_count) &gt; $idx{0})}`" repeatCount="$REGION_COUNT" >
            <Member name="base" value="`${RegisterDefine}`" />
            <Member name="offset" value="`${combined_start_offset$idx{0}}`U" />
            <Member name="size"   value="`${size$idx{0}}`U" />
            <Member name="regionSize"   value="`${blockSizeEnum}`" />
            <Member name="ns_mask"   value="`${isBlockUsed(combined_security$idx{0}) ? getExposedMember(combined_security$idx{0}, &quot;ns_perm&quot;) : &quot;NULL&quot;}`U" />
            <Member name="r_mask"   value="`${isBlockUsed(combined_security$idx{0}) ? getExposedMember(combined_security$idx{0}, &quot;read_perm&quot;) : &quot;NULL&quot;}`U" />
            <Member name="w_mask"   value="`${isBlockUsed(combined_security$idx{0}) ? getExposedMember(combined_security$idx{0}, &quot;write_perm&quot;) : &quot;NULL&quot;}`U" />
          </ConfigStruct>
          <ConfigStruct name="empty" type="nested" const="true" public="true" include="`${ ((combined_range_count &gt; $idx{0}) &amp;&amp; (isSmif eq true)) }`" repeatCount="$REGION_COUNT" >
            <Member name="base" value="`${RegisterDefine2}`" />
            <Member name="offset" value="`${combined_start_offset$idx{0}}`U" />
            <Member name="size"   value="`${size$idx{0}}`U" />
            <Member name="regionSize"   value="`${blockSizeEnum}`" />
            <Member name="ns_mask"   value="`${isBlockUsed(combined_security$idx{0}) ? getExposedMember(combined_security$idx{0}, &quot;ns_perm&quot;) : &quot;NULL&quot;}`U" />
            <Member name="r_mask"   value="`${isBlockUsed(combined_security$idx{0}) ? getExposedMember(combined_security$idx{0}, &quot;read_perm&quot;) : &quot;NULL&quot;}`U" />
            <Member name="w_mask"   value="`${isBlockUsed(combined_security$idx{0}) ? getExposedMember(combined_security$idx{0}, &quot;write_perm&quot;) : &quot;NULL&quot;}`U" />
          </ConfigStruct>
        </ConfigArray>
  </ConfigFirmware>

</PersonalityTemplate>
