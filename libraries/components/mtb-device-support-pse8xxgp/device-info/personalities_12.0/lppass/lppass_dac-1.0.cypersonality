<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file lppass_dac-1.0.cypersonality
* \version 1.0
*
* \brief
* CT DAC personality description file.
*
********************************************************************************
* \copyright
* (c) (2025), Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<PersonalityTemplate id="lppass_dac" name="CT DAC" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v10">

  <FittingRules>
    <MappingRules>
        <IpBlock name="mxs22lppass" />
        <Resource name="pass\.dac"/>
    </MappingRules>
  </FittingRules>

  <ExposedMembers>
      <ExposedMember key="INST_NAME_dac"              paramId="INST_NAME_dac" />
      <ExposedMember key="dac_outputTopology"         paramId="outputTopology"/>
      <ExposedMember key="dac_sampleAndHoldEnable"    paramId="sampleAndHoldEnable"/>
      <ExposedMember key="dac_enableStepValues"       paramId="enableStepValues"/>
      <ExposedMember key="dac_stepValue$idx"          paramId="stepValue$idx"             repeatCount="3"/>
      <ExposedMember key="dac_rangeCondition$idx"     paramId="rangeCondition$idx"        repeatCount="3"/>
      <ExposedMember key="dac_rangeCondition$idx_Info" paramId="rangeCondition$idx_Info"  repeatCount="3"/>
      <ExposedMember key="dac_lowerThreshold$idx"      paramId="lowerThreshold$idx"       repeatCount="3"/>
      <ExposedMember key="dac_upperThreshold$idx"      paramId="upperThreshold$idx"       repeatCount="3"/>
      <ExposedMember key="dac_rangeDetection"         paramId="rangeDetection"/>
      <ExposedMember key="dac_channelCount"           paramId="channelCount"/>
      <ExposedMember key="dac_refreshTimeValueHS"     paramId="refreshTimeValueHS"/>
      <ExposedMember key="dac_refreshTimeValueLP"     paramId="refreshTimeValueLP"/>
      <ExposedMember key="dac_sampleTimeLP"           paramId="sampleTimeLP"/>
      <ExposedMember key="dac_holdTimeLP"             paramId="holdTimeLP"/>
      <ExposedMember key="dac_referenceBufferPower"   paramId="referenceBufferPower"/>
      <ExposedMember key="dac_outputBufferPower"      paramId="outputBufferPower"/>
      <ExposedMember key="dac_vrefSel"                paramId="vrefSelect"/>
  </ExposedMembers>

  <Parameters>

<!-- Debug -->
    <ParamBool   id="debug"
                 name="debug"
                 group="Internal"
                 default="false"
                 visible="false"
                 editable="true"
                 desc="" />

<!-- LPPASS instances -->
    <ParamString id="inst_pass"
                 name="Instance Number"
                 group="Internal"
                 default="`${getInstNumber(&quot;pass&quot;)}`"
                 visible="`${debug}`"
                 editable="false"
                 desc="" />

    <ParamString id="inst_dac"
                 name="inst_dac"
                 group="Internal"
                 default="`${getInstNumber(&quot;dac&quot;)}`"
                 visible="`${debug}`"
                 editable="false"
                 desc="" />

<!-- LPPASS resources -->
    <ParamString id="resource_pass"
                 name="PASS Resource"
                 group="Internal"
                 default="pass[`${inst_pass}`]"
                 visible="`${debug}`"
                 editable="false"
                 desc="" />

    <ParamString id="resource_ac"
                 name="resource_ac"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${&quot;pass[&quot; . inst_pass . &quot;].ac[&quot; . 0 . &quot;]&quot;}`"/>

    <ParamString id="resource_dac"
                 name="resource_dac"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${&quot;pass[&quot; . inst_pass . &quot;].dac[&quot; . inst_dac . &quot;]&quot;}`"/>

    <Repeat count="15">
      <ParamString id="resource_chan_$idx"
                   name="resource_chan_$idx"
                   group="Internal"
                   visible="`${debug}`"
                   desc=""
                   editable="false"
                   default="`${&quot;pass[&quot; . inst_pass . &quot;].dac[&quot; . inst_dac . &quot;].dacchan[&quot; . $idx . &quot;]&quot;}`"/>

      <ParamBool id="dacChan_$idx_enabled"
                 name="dacChan_$idx_enabled"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${(isBlockUsed(resource_chan_$idx))}`"/>
    </Repeat>

<!-- LPPASS external variables -->
    <ParamString id="inFlash" name="inFlash" group="Internal" visible="false" desc="" editable="false" default="`${getExposedMember(resource_pass, &quot;inFlash&quot;)}`"/>
    <ParamString id="opMode" name="opMode" group="Internal" visible="false" desc="" editable="false" default="`${(getExposedMember(resource_ac, &quot;opMode&quot;))}`"/>
    <ParamString id="vdda" name="vdda" group="Internal" visible="false" desc="" editable="false" default="`${(getExposedMember(resource_pass, &quot;vdda&quot;))}`"/>

    <Repeat count="2">
        <ParamBool   id="prbOut$idxIsEnabled"
                     name="prbOut$idxIsEnabled"
                     group="Internal"
                     visible="`${debug}`"
                     editable="false"
                     desc=""
                     default="`${isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].prb[0]&quot;) ? getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].prb[0]&quot;, &quot;prbOut$idxEnable&quot;) : &quot;false&quot;}`"/>

    <ParamString id="prbOut$idxVoltage"
                 name="prbOut$idxVoltage"
                 group="Internal"
                 editable="false"
                 visible="`${debug}`"
                 desc=""
                 default="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].prb[0]&quot;, &quot;prbOut&quot; . $idx . &quot;Voltage&quot;)}`"/>
    </Repeat>

<!-- LPPASS internal parameters -->
    <ParamString id="INST_NAME_dac" name="INST_NAME_dac" group="Internal" default="`${INST_NAME}`" visible="`${debug}`" editable="false" desc="" />

    <ParamChoice id="outputTopology"
                 name="Output Topology"
                 group="Static Configuration"
                 visible="true"
                 editable="true"
                 desc="Topology of the DAC. Reserve and configure the corresponding pin in Autonomous Analog tab (if required)."
                 default="CY_AUTANALOG_DAC_TOPO_DIRECT">
      <Entry name="Unbuffered"                          value="CY_AUTANALOG_DAC_TOPO_DIRECT" visible="true"/>
      <Entry name="Unbuffered with Track Cap"           value="CY_AUTANALOG_DAC_TOPO_DIRECT_WITH_TRACK_CAP" visible="true"/>
      <Entry name="Unbuffered with Track and Hold Caps" value="CY_AUTANALOG_DAC_TOPO_DIRECT_WITH_TRACK_HOLD_CAP" visible="true"/>
      <Entry name="Buffered Internal Drive"             value="CY_AUTANALOG_DAC_TOPO_BUFFERED_INTERNAL" visible="true"/>
      <Entry name="Buffered Pin Drive"                  value="CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL" visible="true"/>
    </ParamChoice>

    <ParamBool id="sampleAndHoldEnable"
               name="Sample and Hold Enable"
               group="Static Configuration"
               visible="`${(opMode eq &quot;LowPower&quot;) &amp;&amp; ((outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_INTERNAL) || (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL))}`"
               editable="true"
               desc="Use Sample and Hold. Can be enabled for individual channels in channel settings"
               default="false"/>

    <ParamChoice id="vrefSelect"
                 name="VREF Select"
                 group="Static Configuration"
                 visible="true"
                 editable="true"
                 desc="Select the reference voltage of the DAC"
                 default="0">
      <Entry name="VDDA"            value="0" visible="true"/>
      <Entry name="VBGR (0.9 V)"    value="1" visible="true"/>
      <Entry name="PRB Out0"        value="2" visible="true"/>
      <Entry name="PRB Out1"        value="3" visible="true"/>
      <Entry name="CTB0 Opamp0 Out" value="4" visible="true"/>
      <Entry name="CTB0 Opamp1 Out" value="5" visible="true"/>
      <Entry name="CTB1 Opamp0 Out" value="6" visible="true"/>
      <Entry name="CTB1 Opamp1 Out" value="7" visible="true"/>
    </ParamChoice>

    <ParamRange  id="OpampVrefOutput"
                 name="Opamp VREF Output"
                 group="Static Configuration"
                 min="0"
                 max="1800"
                 resolution="1"
                 visible="`${(vrefSelect == 4) || (vrefSelect == 5) || (vrefSelect == 6) || (vrefSelect == 7)}`"
                 editable="true"
                 desc="Enter the value of expected VREF output in mV from Opamp"
                 default="1800"/>

    <ParamString id="vrefOutput"
        name="vrefOutput"
        group="Internal"
        visible="`${debug}`"
        editable="false"
        desc=""
        default="`${(vrefSelect == 0) ? (vdda) :
                    (vrefSelect == 1) ? (900) :
                    (vrefSelect == 2) ? (prbOut0Voltage) :
                    (vrefSelect == 3) ? (prbOut1Voltage) :
                   ((vrefSelect == 4) ||
                    (vrefSelect == 5) ||
                    (vrefSelect == 6) ||
                    (vrefSelect == 7)) ? OpampVrefOutput : 0}`"/>

    <ParamString id="voltageOutput"
        name="Voltage Output"
        group="Static Configuration"
        visible="true"
        editable="false"
        desc="0 to VREF - Voltage Resolution, mV"
        default="0 to `${(vrefOutput - vrefOutput / 4096.0)}` mV"/>

    <ParamChoice id="disabledOutputState"
                 name="Disabled Output State"
                 group="Static Configuration"
                 visible="true"
                 editable="true"
                 desc="Output when the DAC is disabled"
                 default="false">
      <Entry name="Analog Hi-Z" value="false" visible="true"/>
      <Entry name="VSSA"        value="true" visible="true"/>
    </ParamChoice>

  <!-- local variables for clocks initialization -->
    <ParamString id="dacInstNum"          name="dacInstNum"           group="Internal" desc="" visible="false" editable="false"   default="`${getInstNumber(&quot;dac&quot;)}`" />
    <ParamString id="clockDacExternalVar" name="clockDacExternalVar"  group="Internal" desc="" visible="false" editable="false"   default="clockDac`${dacInstNum}`"/>
    <ParamString id="clockDac"            name="clockDac"             group="Internal" desc="" visible="false" editable="false"   default="`${getExposedMember(&quot;pass[0]&quot;, clockDacExternalVar)}`"/>
    <ParamString id="clockSource"         name="clockSource"          group="Internal" desc="" visible="false" editable="false"   default="`${findBlockFromSignalValue(clockDac, &quot;peri.group.div_&quot;)}`"/>
    <ParamString id="isClockEnabled"      name="isClockEnabled"       group="Internal" desc="" visible="false" editable="false"   default="`${clockDac ne &quot;&quot;}`"/>
    <ParamString id="errorMessage"        name="errorMessage"         group="Internal" desc="" visible="false" editable="false"   default="DAC Clock Divider is not reserved"/>
    <ParamString id="dividerValue"        name="divider"              group="Internal" desc="" visible="false" editable="false"   default="`${isClockEnabled ? getExposedMember(clockSource, &quot;divider&quot;) : 0}`"/>
    <ParamString id="accuracy"            name="accuracy"             group="Internal" desc="" visible="false" editable="false"   default="`${isClockEnabled ? getExposedMember(clockSource, &quot;accuracy&quot;) : 0}`" />
    <ParamString id="frequencyValue"      name="frequency"            group="Internal" desc="" visible="false" editable="false"   default="`${isClockEnabled ? getExposedMember(clockSource, &quot;frequency&quot;) : 0}`"/>

    <!-- LP clock -->
    <ParamRange  id="clockDividerLP"
                 name="Clock Divider (LP)"
                 group="DAC Clock"
                 min="4"
                 max="1024"
                 resolution="1"
                 visible="`${opMode eq &quot;LowPower&quot;}`"
                 editable="true"
                 desc="Divider for DAC Refresh Rate and DAC Refresh Time evaluation"
                 default="4"/>

    <ParamString id="refreshRateLP"
                 name="DAC Refresh Rate (LP)"
                 group="DAC Clock"
                 desc="DAC Refresh Rate = 4.096 MHz / Clock Divider"
                 visible="`${opMode eq &quot;LowPower&quot;}`"
                 editable="false"
                 default="`${formatFrequency(4096000.0/clockDividerLP)}`"/>

    <ParamString id="refreshTimeValueLP" name="refreshTimeValueLP" group="Internal" desc="" visible="false" editable="false" default="`${clockDividerLP /4096000.0}`"/>

    <ParamString id="refreshTimeLP"
                 name="DAC Refresh Time (LP)"
                 group="DAC Clock"
                 desc="DAC Refresh Time = 1 / DAC Refresh Rate"
                 visible="`${opMode eq &quot;LowPower&quot;}`"
                 editable="false"
                 default="`${refreshTimeValueLP gt 0.001 ? refreshTimeValueLP * 1000 :
                            refreshTimeValueLP gt 0.000001 ? refreshTimeValueLP * 1000000 :
                            refreshTimeValueLP gt 0.000000001 ? refreshTimeValueLP * 1000000000 :
                            refreshTimeValueLP * 1000000000000}` `${
                            refreshTimeValueLP gt 0.001 ? &quot;ms&quot; :
                            refreshTimeValueLP gt 0.000001 ? &quot;us&quot; :
                            refreshTimeValueLP gt 0.000000001 ? &quot;ns&quot; :
                            &quot;ps&quot;}`"/>

    <!-- HS clock -->
    <ParamString id="clockDividerHS"
                name="Clock Divider (HS)"
                group="DAC Clock"
                visible="`${opMode eq &quot;HighSpeed&quot;}`"
                editable="false"
                desc="Peri Clock connected to DAC0 /DAC1 divider value"
                default="`${isClockEnabled ? cast(int64, dividerValue) : errorMessage}`"/>

   <ParamString id="refreshRateHS"
                name="DAC Refresh Rate (HS)"
                group="DAC Clock"
                desc="DAC Refresh Rate  = Peri Clock connected to DAC0 /DAC1 frequency value"
                visible="`${opMode eq &quot;HighSpeed&quot;}`"
                editable="false"
                default="`${isClockEnabled ? formatFrequency(frequencyValue, accuracy) : errorMessage}`"/>

    <ParamString id="refreshTimeValueHS" name="refreshTimeValueHS" group="Internal" desc="" visible="false" editable="false" default="`${isClockEnabled ? (1.0 / frequencyValue) : 0}`"/>

    <ParamString id="refreshTimeHS"
                 name="DAC Refresh Time (HS)"
                 group="DAC Clock"
                 desc="DAC Refresh Time = 1 / DAC Refresh Rate"
                 visible="`${opMode eq &quot;HighSpeed&quot;}`"
                 editable="false"
                 default="`${isClockEnabled ? (
                            refreshTimeValueHS gt 0.001 ? refreshTimeValueHS * 1000 :
                            refreshTimeValueHS gt 0.000001 ? refreshTimeValueHS * 1000000 :
                            refreshTimeValueHS gt 0.000000001 ? refreshTimeValueHS * 1000000000 :
                            refreshTimeValueHS * 1000000000000) : refreshTimeValueHS}` `${isClockEnabled ? (
                            refreshTimeValueHS gt 0.001 ? &quot;ms&quot; :
                            refreshTimeValueHS gt 0.000001 ? &quot;us&quot; :
                            refreshTimeValueHS gt 0.000000001 ? &quot;ns&quot; :
                            &quot;ps&quot;) : &quot;&quot;}`"/>

    <ParamBool id="enableStepValues"
               name="Enable Step Values"
               group="DAC Step"
               visible="true"
               editable="true"
               desc="Enable multiple global values of data step sizes"
               default="false"/>

    <Repeat count="3">
    <ParamRange id="stepValue$idx"
                name="Step Value $idx"
                group="DAC Step"
                min="1"
                max="256"
                resolution="1"
                visible="`${(enableStepValues)}`"
                editable="true"
                desc="Global Step Value $idx used by the DAC channels"
                default="1"/>
    </Repeat>

    <ParamChoice id="dataFormat"
                 name="Data Format"
                 group="Common DAC Settings"
                 visible="true"
                 editable="true"
                 desc="Unsigned or two's complement (signed) mode"
                 default="false">
      <Entry name="Unsigned" value="false" visible="true"/>
      <Entry name="Signed"   value="true" visible="true"/>
    </ParamChoice>

    <ParamString id="vrefOutputInfo"
                 name="vrefOutputInfo"
                 group="Internal"
                 desc=""
                 visible="`${debug}`"
                 editable="false"
                 default="`${(vrefOutput - vrefOutput / 4096.0)}`"/>

    <ParamString id="halfVrefOutputInfo"
                 name="halfVrefOutputInfo"
                 group="Internal"
                 desc=""
                 visible="`${debug}`"
                 editable="false"
                 default="`${(vrefOutput - vrefOutput / 4096.0) / 2.0}`"/>

    <ParamString id="dataFormat_InfoLow"
                 name="Data Ranges, low"
                 group="Common DAC Settings"
                 desc="DAC data ranges and corresponding output voltages"
                 visible="true"
                 editable="false"
                 default="`${(dataFormat eq false) ?
                             &quot;0x000 = 0 mV&quot; :
                             &quot;0x800 = 0 mV&quot;}`"/>

    <ParamString id="dataFormat_InfoMid"
                 name="Data Ranges, mid"
                 group="Common DAC Settings"
                 desc="DAC data ranges and corresponding output voltages"
                 visible="true"
                 editable="false"
                 default="`${(dataFormat eq false) ?
                             &quot;0x800 = &quot; . halfVrefOutputInfo . &quot; mV&quot; :
                             &quot;0x000 = &quot; . halfVrefOutputInfo . &quot; mV&quot;}`"/>

    <ParamString id="dataFormat_InfoHigh"
                 name="Data Ranges, high"
                 group="Common DAC Settings"
                 desc="DAC data ranges and corresponding output voltages"
                 visible="true"
                 editable="false"
                 default="`${(dataFormat eq false) ?
                             &quot;0xFFF = &quot; . vrefOutputInfo . &quot; mV&quot; :
                             &quot;0x7FF = &quot; . vrefOutputInfo . &quot; mV&quot;}`"/>

    <ParamBool id="rangeDetection"
               name="Limit Detection"
               group="DAC Limits"
               visible="true"
               editable="true"
               desc="Enable Data Limit Detection that generates Triggers/Interrupts. Reserve and configure the corresponding pin in Autonomous Analog tab (if required)."
               default="false"/>

    <Repeat count="3">
    <ParamChoice id="rangeCondition$idx"
                 name="Limit Condition $idx"
                 group="DAC Limits"
                 visible="`${(rangeDetection)}`"
                 editable="`${(rangeDetection)}`"
                 desc="Select Limit Condition mode"
                 default="CY_AUTANALOG_DAC_CH_LIMIT_BELOW">
      <Entry name="Below the Threshold" value="CY_AUTANALOG_DAC_CH_LIMIT_BELOW"   visible="true"/>
      <Entry name="Above the Threshold" value="CY_AUTANALOG_DAC_CH_LIMIT_ABOVE"   visible="true"/>
      <Entry name="Inside the Window"   value="CY_AUTANALOG_DAC_CH_LIMIT_INSIDE"  visible="true"/>
      <Entry name="Outside the Window"  value="CY_AUTANALOG_DAC_CH_LIMIT_OUTSIDE" visible="true"/>
    </ParamChoice>

    <ParamString id="rangeCondition$idx_Info"
                 name="Limit Condition Equation $idx"
                 group="DAC Limits"
                 desc="Limit Condition Equation for selected mode"
                 visible="`${(rangeDetection)}`"
                 editable="false"
                 default="`${(rangeCondition$idx eq CY_AUTANALOG_DAC_CH_LIMIT_BELOW) ? &quot;DAC Data &lt; Lower Threshold $idx&quot; : (rangeCondition$idx eq CY_AUTANALOG_DAC_CH_LIMIT_ABOVE) ? &quot;DAC Data &gt; Upper Threshold $idx&quot; : (rangeCondition$idx eq CY_AUTANALOG_DAC_CH_LIMIT_INSIDE) ? &quot;Lower Threshold $idx &lt;= DAC Data &lt; Upper Threshold $idx&quot; : (rangeCondition$idx eq CY_AUTANALOG_DAC_CH_LIMIT_OUTSIDE) ? &quot;DAC Data &lt; Lower Threshold $idx or DAC Data &gt;= Upper Threshold $idx&quot; : &quot;N/A&quot;}`"/>

    <ParamRange id="lowerThreshold$idx"
                name="Lower Threshold $idx"
                group="DAC Limits"
                min="`${dataFormat ? -2048 : 0}`"
                max="`${dataFormat ? 2047 : 4095}`"
                resolution="1"
                visible="`${(rangeDetection) &amp;&amp; (rangeCondition$idx ne &quot;CY_AUTANALOG_DAC_CH_LIMIT_ABOVE&quot;)}`"
                editable="`${(rangeDetection) &amp;&amp; (rangeCondition$idx ne &quot;CY_AUTANALOG_DAC_CH_LIMIT_ABOVE&quot;)}`"
                desc="Low Threshold for Limit Detect"
                default="0"/>

        <ParamRange id="upperThreshold$idx"
                name="Upper Threshold $idx"
                group="DAC Limits"
                min="`${dataFormat ? -2048 : 0}`"
                max="`${dataFormat ? 2047 : 4095}`"
                resolution="1"
                visible="`${(rangeDetection) &amp;&amp; (rangeCondition$idx ne &quot;CY_AUTANALOG_DAC_CH_LIMIT_BELOW&quot;)}`"
                editable="`${(rangeDetection) &amp;&amp; (rangeCondition$idx ne &quot;CY_AUTANALOG_DAC_CH_LIMIT_BELOW&quot;)}`"
                desc="Upper Threshold for Limit Detect"
                default="0"/>
    </Repeat>

    <ParamBool id="showAdvancedSettings"
               name="Show Advanced Settings"
               group="Advanced Settings"
               visible="true"
               editable="true"
               desc="Unlocks advanced controls for reference and output buffer power, sampling and de-glitctch timings"
               default="false"/>

    <ParamChoice id="referenceBufferPower"
                 name="Reference Buffer Power"
                 group="Advanced Settings"
                 visible="`${(showAdvancedSettings) &amp;&amp; (vrefSelect != 0)}`"
                 editable="`${(showAdvancedSettings) &amp;&amp; (vrefSelect != 0)}`"
                 desc="Controls power consumption, Max sample rate and input VREF voltage range of the DAC's reference buffer"
                 default="CY_AUTANALOG_DAC_REF_BUF_PWR_OFF">
      <Entry name="Off"                             value="CY_AUTANALOG_DAC_REF_BUF_PWR_OFF"             visible="true"/>
      <Entry name="Ultra-Low"                       value="CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW"       visible="true"/>
      <Entry name="Ultra-Low, Rail-to-Rail Inputs"  value="CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW_RAIL"  visible="true"/>
      <Entry name="Low, Rail-to-Rail Inputs"        value="CY_AUTANALOG_DAC_REF_BUF_PWR_LOW_RAIL"        visible="true"/>
      <Entry name="Medium, Rail-to-Rail Inputs"     value="CY_AUTANALOG_DAC_REF_BUF_PWR_MEDIUM_RAIL"     visible="true"/>
      <Entry name="High, Rail-to-Rail Inputs"       value="CY_AUTANALOG_DAC_REF_BUF_PWR_HIGH_RAIL"       visible="true"/>
      <Entry name="Ultra-High, Rail-to-Rail Inputs" value="CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_HIGH_RAIL" visible="true"/>
    </ParamChoice>

    <ParamString id="referenceBufferCurrent"
                 name="Reference Buffer current"
                 group="Advanced Settings"
                 default="`${referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW ? &quot;15&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW_RAIL ? &quot;35&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_LOW_RAIL ? &quot;150&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_MEDIUM_RAIL ? &quot;200&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_HIGH_RAIL ? &quot;600&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_HIGH_RAIL ? &quot;800&quot; : &quot;&quot;}` uA"
                 visible="`${referenceBufferPower ne CY_AUTANALOG_DAC_REF_BUF_PWR_OFF}`"
                 editable="false"
                 desc="Reference Buffer quiescent current" />

    <ParamString id="referenceBufferVoltage"
                 name="Reference Buffer common mode range"
                 group="Advanced Settings"
                 default="`${referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW ? &quot;0.2 V to VDDA - 1.0 V&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_LOW_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_MEDIUM_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_HIGH_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_HIGH_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; : &quot;&quot;}`"
                 visible="`${referenceBufferPower ne CY_AUTANALOG_DAC_REF_BUF_PWR_OFF}`"
                 editable="false"
                 desc="Reference Buffer common mode voltage range" />

    <ParamString id="referenceBufferBandwidth"
                 name="Reference Buffer bandwidth"
                 group="Advanced Settings"
                 default="`${referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW ? &quot;30 kHz&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW_RAIL ? &quot;30 kHz&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_LOW_RAIL ? &quot;350 kHz&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_MEDIUM_RAIL ? &quot;700 kHz&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_HIGH_RAIL ? &quot;1.75 MHz&quot; :
                             referenceBufferPower eq CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_HIGH_RAIL ? &quot;2.8 MHz&quot; : &quot;&quot;}`"
                 visible="`${referenceBufferPower ne CY_AUTANALOG_DAC_REF_BUF_PWR_OFF}`"
                 editable="false"
                 desc="Reference Buffer frequency bandwidth" />

    <ParamChoice id="outputBufferPower"
                 name="Output Buffer Power"
                 group="Advanced Settings"
                 visible="`${((showAdvancedSettings) &amp;&amp; ((outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_INTERNAL) || (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL)))}`"
                 editable="`${((showAdvancedSettings) &amp;&amp; ((outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_INTERNAL) || (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL)))}`"
                 desc="Controls power consumption, Max sample rate and output voltage range of the DAC's output buffer"
                 default="CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF">
      <Entry name="Off"                             value="CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF"             visible="true"/>
      <Entry name="Ultra-Low"                       value="CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW"       visible="true"/>
      <Entry name="Ultra-Low, Rail-to-Rail Inputs"  value="CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW_RAIL"  visible="true"/>
      <Entry name="Low, Rail-to-Rail Inputs"        value="CY_AUTANALOG_DAC_OUT_BUF_PWR_LOW_RAIL"        visible="true"/>
      <Entry name="Medium, Rail-to-Rail Inputs"     value="CY_AUTANALOG_DAC_OUT_BUF_PWR_MEDIUM_RAIL"     visible="true"/>
      <Entry name="High, Rail-to-Rail Inputs"       value="CY_AUTANALOG_DAC_OUT_BUF_PWR_HIGH_RAIL"       visible="true"/>
      <Entry name="Ultra-High, Rail-to-Rail Inputs" value="CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_HIGH_RAIL" visible="true"/>
    </ParamChoice>

    <ParamString id="outputBufferCurrent"
                 name="Output Buffer current"
                 group="Advanced Settings"
                 default="`${outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW ? &quot;15&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW_RAIL ? &quot;35&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_LOW_RAIL ? &quot;150&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_MEDIUM_RAIL ? &quot;200&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_HIGH_RAIL ? &quot;600&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_HIGH_RAIL ? &quot;800&quot; : &quot;&quot;}` uA"
                 visible="`${outputBufferPower ne CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF}`"
                 editable="false"
                 desc="Output Buffer quiescent current" />

    <ParamString id="outputBufferVoltage"
                 name="Output Buffer common mode range"
                 group="Advanced Settings"
                 default="`${outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW ? &quot;0.2 V to VDDA - 1.0 V&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_LOW_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_MEDIUM_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_HIGH_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_HIGH_RAIL ? &quot;0.2 V to VDDA - 0.2 V&quot; : &quot;&quot;}`"
                 visible="`${outputBufferPower ne CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF}`"
                 editable="false"
                 desc="Output Buffer common mode voltage range" />

    <ParamString id="outputBufferBandwidth"
                 name="Output Buffer bandwidth"
                 group="Advanced Settings"
                 default="`${outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW ? (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL ? &quot;100 kHz&quot; : &quot;30 kHz&quot;) :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW_RAIL ? (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL ? &quot;100 kHz&quot; : &quot;30 kHz&quot;) :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_LOW_RAIL ? (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL ? &quot;1.2 MHz&quot; : &quot;350 kHz&quot;) :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_MEDIUM_RAIL ? (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL ? &quot;2.4 MHz&quot; : &quot;700 kHz&quot;) :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_HIGH_RAIL ? (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL ? &quot;6 MHz&quot; : &quot;1.75 MHz&quot;) :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_HIGH_RAIL ? (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL ? &quot;7.5 MHz&quot; : &quot;2.8 MHz&quot;) : &quot;&quot;}`"
                 visible="`${outputBufferPower ne CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF}`"
                 editable="false"
                 desc="Output Buffer frequency bandwidth" />

    <ParamString id="outputBufferCapability"
                 name="Output Buffer drive capability"
                 group="Advanced Settings"
                 default="`${outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW ? &quot;10 uA&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW_RAIL ? &quot;10 uA&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_LOW_RAIL ? &quot;100 uA&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_MEDIUM_RAIL ? &quot;1 mA&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_HIGH_RAIL ? &quot;1 mA&quot; :
                             outputBufferPower eq CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_HIGH_RAIL ? &quot;10 mA&quot; : &quot;&quot;}`"
                 visible="`${(outputBufferPower ne CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF) &amp;&amp; (outputTopology eq CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL)}`"
                 editable="false"
                 desc="Output drive capability of the output buffer" />

    <ParamRange id="sampleTime"
                name="Sample Time (LP)"
                group="Advanced Settings"
                min="1"
                max="256"
                resolution="1"
                visible="`${(opMode eq &quot;LowPower&quot;) &amp;&amp; (showAdvancedSettings) &amp;&amp; (sampleAndHoldEnable)}`"
                editable="true"
                desc="Sample time in undivided DAC Clock Cycles (for sample and hold modes)."
                default="1"/>

    <ParamString id="sampleTimeValueLP" name="sampleTimeValueLP" group="Internal" desc="" visible="false" editable="false" default="`${sampleTime / 4096000.0}`"/>

    <ParamString id="sampleTimeLP"
                 name="Sample Time (LP)"
                 group="Advanced Settings"
                 desc="Sample Time value = Sample Time / 4.096 MHz"
                 visible="`${(opMode eq &quot;LowPower&quot;) &amp;&amp; (showAdvancedSettings) &amp;&amp; (sampleAndHoldEnable)}`"
                 editable="false"
                 default="`${sampleTimeValueLP gt 0.001 ? sampleTimeValueLP * 1000 :
                             sampleTimeValueLP gt 0.000001 ? sampleTimeValueLP * 1000000 :
                             sampleTimeValueLP gt 0.000000001 ? sampleTimeValueLP * 1000000000 :
                             sampleTimeValueLP * 1000000000000}` `${
                             sampleTimeValueLP gt 0.001 ? &quot;ms&quot; :
                             sampleTimeValueLP gt 0.000001 ? &quot;us&quot; :
                             sampleTimeValueLP gt 0.000000001 ? &quot;ns&quot; :
                             &quot;ps&quot;}`"/>

    <ParamString id="holdTimeValueLP" name="holdTimeValueLP" group="Internal" desc="" visible="false" editable="false" default="`${(refreshTimeValueLP > sampleTimeValueLP) ? (refreshTimeValueLP - sampleTimeValueLP) : 0}`"/>

    <ParamString id="holdTimeLP"
                 name="Hold Time (LP)"
                 group="Advanced Settings"
                 desc="Hold time (for sample and hold modes) = Refresh Time -  Sample Time"
                 visible="`${(opMode eq &quot;LowPower&quot;) &amp;&amp; (showAdvancedSettings) &amp;&amp; (sampleAndHoldEnable)}`"
                 editable="false"
                 default="`${holdTimeValueLP gt 0.001 ? holdTimeValueLP * 1000 :
                             holdTimeValueLP gt 0.000001 ? holdTimeValueLP * 1000000 :
                             holdTimeValueLP gt 0.000000001 ? holdTimeValueLP * 1000000000 :
                             holdTimeValueLP * 1000000000000}` `${
                             holdTimeValueLP gt 0.001 ? &quot;ms&quot; :
                             holdTimeValueLP gt 0.000001 ? &quot;us&quot; :
                             holdTimeValueLP gt 0.000000001 ? &quot;ns&quot; :
                             &quot;ps&quot;}`"/>

    <ParamBool id="deglitchEnable"
               name="Deglitch Enable"
               group="Advanced Settings"
               visible="`${(showAdvancedSettings)}`"
               editable="true"
               desc="Deglitch disconnects the DAC from the output for a specified time"
               default="false"/>

    <ParamRange id="deglitchTime"
                name="Deglitch Time"
                group="Advanced Settings"
                min="1"
                max="256"
                resolution="1"
                visible="`${(showAdvancedSettings) &amp;&amp; (deglitchEnable)}`"
                editable="true"
                desc="Deglitch time in DAC Clock Cycles."
                default="1"/>

    <ParamString id="deglitchTimeValue" name="deglitchTimeValue" group="Internal" desc="" visible="false" editable="false" default="`${(opMode eq &quot;LowPower&quot;) ? (deglitchTime / 4096000.0) : (isClockEnabled ? (1.0 * deglitchTime) / (frequencyValue * clockDividerHS) : 0)}`"/>

    <ParamString id="deglitchTimeLP"
                 name="Deglitch Time"
                 group="Advanced Settings"
                 desc="Deglitch Time value = Deglitch Time / DAC Clock"
                 visible="`${(showAdvancedSettings) &amp;&amp; (deglitchEnable) &amp;&amp; (opMode eq &quot;LowPower&quot;)}`"
                 editable="false"
                 default="`${deglitchTimeValue gt 0.001 ? deglitchTimeValue * 1000 :
                             deglitchTimeValue gt 0.000001 ? deglitchTimeValue * 1000000 :
                             deglitchTimeValue gt 0.000000001 ? deglitchTimeValue * 1000000000 :
                             deglitchTimeValue * 1000000000000}` `${
                             deglitchTimeValue gt 0.001 ? &quot;ms&quot; :
                             deglitchTimeValue gt 0.000001 ? &quot;us&quot; :
                             deglitchTimeValue gt 0.000000001 ? &quot;ns&quot; :
                             &quot;ps&quot;}`"/>

    <ParamString id="deglitchTimeHS"
                 name="Deglitch Time"
                 group="Advanced Settings"
                 desc="Deglitch Time value = Deglitch Time / DAC Clock"
                 visible="`${(showAdvancedSettings) &amp;&amp; (deglitchEnable) &amp;&amp; (opMode eq &quot;HighSpeed&quot;)}`"
                 editable="false"
                 default="`${isClockEnabled ? (
                            deglitchTimeValue gt 0.001 ? deglitchTimeValue * 1000 :
                            deglitchTimeValue gt 0.000001 ? deglitchTimeValue * 1000000 :
                            deglitchTimeValue gt 0.000000001 ? deglitchTimeValue * 1000000000 :
                            deglitchTimeValue * 1000000000000) : deglitchTimeValue}` `${isClockEnabled ? (
                            deglitchTimeValue gt 0.001 ? &quot;ms&quot; :
                            deglitchTimeValue gt 0.000001 ? &quot;us&quot; :
                            deglitchTimeValue gt 0.000000001 ? &quot;ns&quot; :
                            &quot;ps&quot;) : &quot;&quot;}`"/>

    <ParamBool id="dacChanEnabled"
               name="dacChanEnabled"
               group="Internal"
               visible="false"
               editable="false"
               desc=""
               default="`${dacChan_0_enabled  ||
                           dacChan_1_enabled  ||
                           dacChan_2_enabled  ||
                           dacChan_3_enabled  ||
                           dacChan_4_enabled  ||
                           dacChan_5_enabled  ||
                           dacChan_6_enabled  ||
                           dacChan_7_enabled  ||
                           dacChan_8_enabled  ||
                           dacChan_9_enabled  ||
                           dacChan_10_enabled ||
                           dacChan_11_enabled ||
                           dacChan_12_enabled ||
                           dacChan_12_enabled ||
                           dacChan_14_enabled}`"/>

  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="Enable and configure Autonomous Analog." condition="`${!isBlockUsed(resource_pass)}`" >
      <FixIt action="ENABLE_BLOCK" target="`${resource_pass}`" value="lppass-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR"
         text="Enable the PRB output $idx to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == (2 + $idx)) &amp;&amp; !(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].prb[0]&quot;) ? getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].prb[0]&quot;, &quot;prbOut$idxEnable&quot;) : &quot;false&quot;)}`" repeatCount="2"/>
    <DRC type="ERROR"
         text="Enable and power the CTB 0, opamp 0 to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 4) &amp;&amp; ((isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[0]&quot;) ? getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[0]&quot;, &quot;power&quot;) : &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;) eq &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;)}`" />
    <DRC type="ERROR"
         text="Enable and power the CTB 0, opamp 1 to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 5) &amp;&amp; ((isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[1]&quot;) ? getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[1]&quot;, &quot;power&quot;) : &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;) eq &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;)}`" />
    <DRC type="ERROR"
         text="Enable and power the CTB 1, opamp 0 to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 6) &amp;&amp; ((isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[0]&quot;) ? getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[0]&quot;, &quot;power&quot;) : &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;) eq &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;)}`" />
    <DRC type="ERROR"
         text="Enable and power the CTB 1, opamp 1 to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 7) &amp;&amp; ((isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[1]&quot;) ? getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[1]&quot;, &quot;power&quot;) : &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;) eq &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot;)}`" />
    <DRC type="ERROR"
         text="Do not configure the CTB 0, opamp 0 in the comparator mode to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 4) &amp;&amp; (isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[0]&quot;) ? (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[0]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_COMPARATOR&quot;) || (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[0]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_HYST_COMPARATOR&quot;) : &quot;false&quot;)}`" />
    <DRC type="ERROR"
         text="Do not configure the CTB 0, opamp 1 in the comparator mode to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 5) &amp;&amp; (isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[1]&quot;) ? (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[1]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_COMPARATOR&quot;) || (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[0].oa[1]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_HYST_COMPARATOR&quot;) : &quot;false&quot;)}`" />
    <DRC type="ERROR"
         text="Do not configure the CTB 1, opamp 0 in the comparator mode to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 6) &amp;&amp; (isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[0]&quot;) ? (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[0]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_COMPARATOR&quot;) || (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[0]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_HYST_COMPARATOR&quot;) : &quot;false&quot;)}`" />
    <DRC type="ERROR"
         text="Do not configure the CTB 1, opamp 1 in the comparator mode to generate a reference voltage for the DAC."
         condition="`${(vrefSelect == 7) &amp;&amp; (isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[1]&quot;) ? (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[1]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_COMPARATOR&quot;) || (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ctb[1].oa[1]&quot;, &quot;topology&quot;) eq &quot;CY_AUTANALOG_CTB_OA_TOPO_HYST_COMPARATOR&quot;) : &quot;false&quot;)}`" />
    <DRC type="ERROR"
         text="The Sample Time is greater than Refresh Time for the DAC `${inst_dac}`."
         condition="`${(opMode eq &quot;LowPower&quot;) ? sampleTimeValueLP > refreshTimeValueLP : &quot;false&quot;}`"/>
    <DRC type="ERROR" text="Lower Threshold greater or equal then Upper Threshold for the DAC `${inst_dac}`." repeatCount="3"
         condition="`${(upperThreshold$idx &lt; lowerThreshold$idx || upperThreshold$idx eq lowerThreshold$idx) &amp;&amp; (rangeCondition$idx eq CY_AUTANALOG_DAC_CH_LIMIT_INSIDE || rangeCondition$idx eq CY_AUTANALOG_DAC_CH_LIMIT_OUTSIDE)}`" />
</DRCs>

  <ConfigFirmware>

    <ConfigInclude value="cy_autanalog.h" include="true" />

<!-- The DAC channel range detection -->
    <ConfigArray    name="`${INST_NAME_dac . &quot;_lim_cfg&quot;}`" type="cy_stc_autanalog_dac_ch_limit_t" const="`${inFlash}`" public="true" include="`${rangeDetection}`" >
      <ConfigStruct name="empty" type="nested" const="false" public="true" repeatCount="3" include="true">
        <Member     name="cond"  value="`${rangeCondition$idx{1}}`" />
        <Member     name="low"   value="`${lowerThreshold$idx{1}}`" />
        <Member     name="high"  value="`${upperThreshold$idx{1}}`" />
      </ConfigStruct>
    </ConfigArray>

<!-- The DAC channel configuration -->
    <ConfigArray name="`${INST_NAME_dac . &quot;_ch_cfg&quot;}`" type="cy_stc_autanalog_dac_ch_t" const="`${inFlash}`" public="true" include="`${dacChanEnabled}`" >
      <ConfigStruct name="empty" type="nested" const="false" public="true" repeatCount="15" include="`${dacChan_$idx{0}_enabled}`">
        <Member name="startAddr"     value="`${getExposedMember(resource_chan_$idx{1}, &quot;runMode&quot;) eq &quot;3&quot; ? getExposedMember(resource_chan_$idx{1}, &quot;dataAddress&quot;) : getExposedMember(resource_chan_$idx{1}, &quot;dataStartAddress&quot;)}`U" />
        <Member name="endAddr"       value="`${getExposedMember(resource_chan_$idx{1}, &quot;runMode&quot;) eq &quot;3&quot; ? getExposedMember(resource_chan_$idx{1}, &quot;dataAddress&quot;) : getExposedMember(resource_chan_$idx{1}, &quot;dataEndAddress&quot;)}`U" />
        <Member name="operMode"      value="`${getExposedMember(resource_chan_$idx{1}, &quot;dataOperMode&quot;)}`" />
        <Member name="sampleAndHold" value="`${getExposedMember(resource_chan_$idx{1}, &quot;sampleAndHold&quot;)}`" />
        <Member name="stepSel"       value="`${enableStepValues &amp;&amp; (getExposedMember(resource_chan_$idx{1}, &quot;waveformData&quot;) != 0) ? (getExposedMember(resource_chan_$idx{1}, &quot;runMode&quot;) eq &quot;3&quot; ? getExposedMember(resource_chan_$idx{1}, &quot;dataStepSize&quot;) : getExposedMember(resource_chan_$idx{1}, &quot;addressStepSize&quot;)) : &quot;CY_AUTANALOG_DAC_STEP_SEL_DISABLED&quot;}`" />
        <Member name="statSel"       value="`${rangeDetection ? (getExposedMember(resource_chan_$idx{1}, &quot;runMode&quot;) eq &quot;3&quot; ? getExposedMember(resource_chan_$idx{1}, &quot;dataLimitDetection&quot;) : getExposedMember(resource_chan_$idx{1}, &quot;runMode&quot;) eq &quot;2&quot; ? getExposedMember(resource_chan_$idx{1}, &quot;addressRangeDetection&quot;) : &quot;CY_AUTANALOG_DAC_STATUS_SEL_DISABLED&quot;) : &quot;CY_AUTANALOG_DAC_STATUS_SEL_DISABLED&quot;}`" />
      </ConfigStruct>
    </ConfigArray>

<!-- The DAC static configuration -->
      <ConfigStruct name="`${INST_NAME_dac . &quot;_sta_cfg&quot;}`" type="cy_stc_autanalog_dac_sta_t" const="`${inFlash}`" public="true" include="`${isBlockUsed(resource_dac)}`">
        <Member name="lpDivDac"      value="`${(clockDividerLP - 1)}`U" />
        <Member name="topology"      value="`${outputTopology}`" />
        <Member name="vrefSel"       value="`${vrefSelect == 0 ? &quot;CY_AUTANALOG_DAC_VREF_VDDA&quot; : &quot;CY_AUTANALOG_DAC_VREF_MUX_OUT&quot;}`" />
        <Member name="deGlitch"      value="`${deglitchEnable}`" />
        <Member name="bottomSel"     value="false" />
        <Member name="disabledMode"  value="`${disabledOutputState}`" />
        <Member name="refBuffPwr"    value="`${(vrefSelect != 0) ? referenceBufferPower : &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_OFF&quot;}`" />
        <Member name="outBuffPwr"    value="`${(outputTopology eq &quot;CY_AUTANALOG_DAC_TOPO_BUFFERED_INTERNAL&quot;) || (outputTopology eq &quot;CY_AUTANALOG_DAC_TOPO_BUFFERED_EXTERNAL&quot;) ? outputBufferPower : &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF&quot;}`" />
        <Member name="sign"          value="`${dataFormat}`" />
        <Member name="vrefMux"       value="`${vrefSelect == 1 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_VBGR&quot;      :
                                               vrefSelect == 2 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_PRB_OUT0&quot;  :
                                               vrefSelect == 3 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_PRB_OUT1&quot;  :
                                               vrefSelect == 4 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_CTB0_OA0&quot;  :
                                               vrefSelect == 5 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_CTB0_OA1&quot;  :
                                               vrefSelect == 6 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_CTB1_OA0&quot;  :
                                               vrefSelect == 7 ? &quot;CY_AUTANALOG_DAC_VREF_MUX_CTB1_OA1&quot;  :
                                                                 &quot;CY_AUTANALOG_DAC_VREF_MUX_VBGR&quot;}`" />
        <Member name="sampleTime"    value="`${(sampleTime - 1)}`U" />
        <ConfigArray name="stepVal" type="nested" const="false" public="true" include="true">
          <ArrayElement value="`${stepValue$idx{0} - 1}`U" count="3"/>
        </ConfigArray>
        <Member name="deGlitchTime"  value="`${deglitchTime - 1}`U" />
        <ConfigArray name="chCfg" type="nested" const="false" public="true" include="true">
          <ArrayElement value="`${(dacChan_$idx{0}_enabled) ? &quot;&amp;&quot; . getExposedMember(resource_dac, &quot;INST_NAME_dac&quot;) . &quot;_ch_cfg[&quot; . $idx{0} . &quot;U]&quot; : &quot;NULL&quot;}`" count="15"/>
        </ConfigArray>
        <ConfigArray name="chLimitCfg" type="nested" const="false" public="true" include="true">
          <ArrayElement value="`${rangeDetection ? &quot;&amp;&quot; . getExposedMember(resource_dac, &quot;INST_NAME_dac&quot;) . &quot;_lim_cfg[&quot; . $idx{0} . &quot;U]&quot; : &quot;NULL&quot;}`" count="3"/>
        </ConfigArray>
      </ConfigStruct>

<!-- The configuration structure to set up the entire DAC -->
      <ConfigStruct name="`${INST_NAME_dac}`_cfg" type="cy_stc_autanalog_dac_t" const="`${inFlash}`" public="true" repeatCount="1" include="`${isBlockUsed(resource_dac)}`">
        <Member name="dacStaCfg" value="`${&quot;&amp;&quot; . getExposedMember(resource_dac, &quot;INST_NAME_dac&quot;) . &quot;_sta_cfg&quot;}`" />
<!--        <Member name="waveform"  value="`${dacChanEnabled ? &quot;&amp;pass_&quot; . inst_pass . &quot;_dac_&quot; . inst_dac . &quot;_waveform_cfg&quot; : &quot;NULL&quot;}`" /> -->
        <Member name="waveform"  value="NULL" />
      </ConfigStruct>

    <!-- The DAC State Transition Table structure -->
    <ConfigArray name="`${INST_NAME_dac}`_stt" type="cy_stc_autanalog_stt_dac_t" const="`${inFlash}`" public="true" include="`${isBlockUsed(resource_dac)}`" >
      <ConfigStruct name="empty" type="nested" const="false" public="true" repeatCount="64" include="`${isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{0} . &quot;]&quot;)}`">
        <Member name="unlock"    value="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{1} . &quot;]&quot;, &quot;stt_dac&quot; . inst_dac . &quot;Unlock&quot;)}`" />
        <Member name="enable"    value="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{1} . &quot;]&quot;, &quot;stt_dac&quot; . inst_dac . &quot;Enable&quot;)}`" />
        <Member name="trigger"   value="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{1} . &quot;]&quot;, &quot;stt_dac&quot; . inst_dac . &quot;Trigger&quot;)}`" />
        <Member name="channel"   value="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{1} . &quot;]&quot;, &quot;stt_dac&quot; . inst_dac . &quot;Channel&quot;)}`" />
        <Member name="direction" value="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{1} . &quot;]&quot;, &quot;stt_dac&quot; . inst_dac . &quot;Command&quot;)}`" />
      </ConfigStruct>
    </ConfigArray>

  </ConfigFirmware>

</PersonalityTemplate>
