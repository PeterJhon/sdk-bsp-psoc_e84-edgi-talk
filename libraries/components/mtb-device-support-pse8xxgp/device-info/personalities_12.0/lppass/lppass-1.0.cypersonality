<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file lppass-1.0.cypersonality
* \version 1.0
*
* \brief
* Autonomous Analog personality description file.
*
********************************************************************************
* \copyright
* (c) (2025), Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<PersonalityTemplate id="lppass" name="Autonomous Analog" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v10">
  <FittingRules>
    <MappingRules>
        <IpBlock name="mxs22lppass" />
        <Resource name="pass"/>
    </MappingRules>
  </FittingRules>

  <ExposedMembers>
    <ExposedMember key="INST_NAME_lppass" paramId="INST_NAME_lppass" />
    <ExposedMember key="inFlash" paramId="inFlash" />
    <ExposedMember key="vdda"    paramId="vdda" />
    <ExposedMember key="clockHfHz" paramId="clockHfHz" />
    <ExposedMember key="clockPtc" paramId="clock_ptc[0]" />
    <ExposedMember key="clockDac$idx" paramId="clock_dac[$idx]" repeatCount="2"/>
    <ExposedMember key="clockPumpPeri" paramId="clock_pump_peri[0]" />
    <ExposedMember key="ctbl$idx_pad_2_shared_ctbl$idx_oa0_out" paramId="ctbl$idx_pad_2_shared_ctbl$idx_oa0_out" repeatCount="2"/>
    <ExposedMember key="ctbl$idx_pad_3_shared_ctbl$idx_oa1_out" paramId="ctbl$idx_pad_3_shared_ctbl$idx_oa1_out" repeatCount="2"/>
    <ExposedMember key="ctbl$idx_pad_6_shared_dac$idx_pad" paramId="ctbl$idx_pad_6_shared_dac$idx_pad" repeatCount="2"/>
    <ExposedMember key="ptc_pad_$idx_shared_sarmux_pad_$idx" paramId="ptc_pad_$idx_shared_sarmux_pad_$idx" repeatCount="8"/>
    <ExposedMember key="lppass_dout_$idx" paramId="lppass_dout[$idx]" repeatCount="4"/>
  </ExposedMembers>

  <Parameters>

<!-- Debug -->
    <ParamBool   id="debug"
                 name="debug"
                 group="Internal"
                 default="false"
                 visible="false"
                 editable="true"
                 desc="" />

<!-- LPPASS instances -->
    <ParamString id="inst_pass"
                 name="inst_pass"
                 group="Internal"
                 default="`${getInstNumber(&quot;pass&quot;)}`"
                 visible="`${debug}`"
                 editable="false"
                 desc="" />

<!-- LPPASS resources -->
    <ParamString id="resource_pass"
                 name="resource_pass"
                 group="Internal"
                 default="pass[`${inst_pass}`]"
                 visible="false"
                 editable="false"
                 desc="" />

    <ParamString id="resource_ac"
                 name="resource_ac"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${&quot;pass[&quot; . inst_pass . &quot;].ac[&quot; . 0 . &quot;]&quot;}`"/>

    <ParamString id="resource_prb"
                 name="resource_prb"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${&quot;pass[&quot; . inst_pass . &quot;].prb[&quot; . 0 . &quot;]&quot;}`"/>

    <ParamString id="resource_ptc"
                 name="resource_ptc"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${&quot;pass[&quot; . inst_pass . &quot;].ptc[&quot; . 0 . &quot;]&quot;}`"/>

    <Repeat count="2">
      <ParamString id="resource_ctb_$idx" name="resource_ctb_$idx" group="Internal" default="`${&quot;pass[&quot; . inst_pass . &quot;].ctb[&quot; . $idx . &quot;]&quot;}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <Repeat count="2">
      <ParamString id="resource_dac_$idx" name="resource_dac_$idx" group="Internal" default="`${&quot;pass[&quot; . inst_pass . &quot;].dac[&quot; . $idx . &quot;]&quot;}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <ParamString id="resource_adc"
                 name="resource_adc"
                 group="Internal"
                 visible="`${debug}`"
                 desc=""
                 editable="false"
                 default="`${&quot;pass[&quot; . inst_pass . &quot;].sar[&quot; . 0 . &quot;]&quot;}`"/>

    <ParamDoc id="pdlDoc" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/pdl/html/group__group__autanalog.html" linkText="Open Autonomous Analog Documentation" visible="true" desc="Opens the Peripheral Driver Library Documentation" />

    <ParamString id="INST_NAME_lppass" name="INST_NAME_lppass" group="Internal" default="`${INST_NAME}`" visible="`${debug}`" editable="false" desc="" />

    <ParamSignal port="clk_hf[0]" name="High-Frequency Clock" group="High-Frequency Clocks" visible="true" desc="High-Frequency Clock for Autonomous Analog" canBeEmpty="false" />
    <ParamBool id="clockHfIsConnected" name="clockHfIsConnected" group="Internal" default="`${hasConnection(&quot;clk_hf&quot;, 0)}`" visible="`${debug}`" editable="false" desc="Check if clk_hf[0] is connected" />

    <ParamString id="clockHf" name="clockHf" group="Internal" default="`${clockHfIsConnected ? getBlockFromSignal(&quot;clk_hf[0]&quot;) : 0}`" visible="false" editable="false" desc="Get Block signal from clk_hf[0]" />
    <ParamRange  id="clockHfHz" name="clockHfHz" group="Internal" default="`${clockHfIsConnected ? getExposedMember(clockHf, &quot;frequency&quot;) : 0}`" min="0" max="1000000000" resolution="1" visible="`${debug}`" editable="false" desc="Frequency of High-Frequency Clock" />
    <ParamString  id="clockHfFreq" name="Frequency" group="High-Frequency Clocks" default="`${formatFrequency(clockHfHz, clockHfIsConnected ? getExposedMember(clockHf, &quot;accuracy&quot;) : 0)}`" visible="true" editable="false" desc="Frequency of High-Frequency Clock" />

    <ParamSignal port="clock_ptc[0]" name="PTC Clock" group="Clocks" visible="true" desc="Clock that operates PTC if HS mode is enabled." canBeEmpty="true" >
      <Constraint type="ACCEPT" targetLocation="peri\[\d+\](\.group\[\d+\])?\.div_.*" valid="true"/>
      <Constraint type="ACCEPT" targetLocation=".*" valid="true" />
    </ParamSignal>
    <ParamSignal port="clock_dac[0]" name="DAC0 Clock" group="Clocks" visible="true" desc="Clock that operates DAC0 if HS mode is enabled." canBeEmpty="true" >
      <Constraint type="ACCEPT" targetLocation="peri\[\d+\](\.group\[\d+\])?\.div_.*" valid="true"/>
      <Constraint type="ACCEPT" targetLocation=".*" valid="true" />
    </ParamSignal>
    <ParamSignal port="clock_dac[1]" name="DAC1 Clock" group="Clocks" visible="true" desc="Clock that operates DAC1 if HS mode is enabled." canBeEmpty="true" >
      <Constraint type="ACCEPT" targetLocation="peri\[\d+\](\.group\[\d+\])?\.div_.*" valid="true"/>
      <Constraint type="ACCEPT" targetLocation=".*" valid="true" />
    </ParamSignal>
    <ParamSignal port="clock_pump_peri[0]" name="Pump Clock" group="Clocks" visible="true" desc="Clock that operates Pump if HS mode is enabled" canBeEmpty="true" >
      <Constraint type="ACCEPT" targetLocation="peri\[\d+\](\.group\[\d+\])?\.div_.*" valid="true"/>
      <Constraint type="ACCEPT" targetLocation=".*" valid="true" />
    </ParamSignal>

    <Repeat count="16">
       <ParamSignal port="ctbl_pads[$idx]" name="CTB`${$idx / 8}` PIN[`${$idx % 8}`]" group="CTB Connections"
        visible="`${hasBlock(&quot;pass[0].ctb[&quot; . ($idx / 8) . &quot;]&quot;) &amp;&amp; hasVisibleOption(&quot;ctbl_pads[$idx]&quot;)}`"
        desc="CTB`${$idx / 8}` pin" canBeEmpty="true">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="ERROR" reason="The pin Drive Mode parameter does not match the expected.">
            <Fixed value="CY_GPIO_DM_ANALOG" />
          </Parameter>
        </Constraint>
      </ParamSignal>
     </Repeat>

     <Repeat count="2">
      <ParamSignal port="dac_pads[$idx]" name="DAC $idx PIN" group="DAC Connections"
        visible="`${hasBlock(&quot;pass[0].dac[$idx]&quot;) &amp;&amp; hasVisibleOption(&quot;dac_pads[$idx]&quot;)}`"
        desc="DAC $idx pin" canBeEmpty="true">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="ERROR" reason="The pin Drive Mode parameter does not match the expected.">
            <Fixed value="CY_GPIO_DM_ANALOG" />
          </Parameter>
        </Constraint>
      </ParamSignal>
    </Repeat>

    <Repeat count="2">
      <ParamSignal port="ctbl_oa$idx_out_10x[0]" name="CTB0 OA$idx OUT 10x" group="CTB Connections"
        visible="`${hasBlock(&quot;pass[0].ctb[$idx]&quot;) &amp;&amp; hasVisibleOption(&quot;ctbl_oa$idx_out_10x[0]&quot;)}`"
        desc="CTB0 OA$idx OUT 10x pin" canBeEmpty="true">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="ERROR" reason="The pin Drive Mode parameter does not match the expected.">
            <Fixed value="CY_GPIO_DM_ANALOG" />
          </Parameter>
        </Constraint>
      </ParamSignal>
    </Repeat>

    <Repeat count="2">
      <ParamSignal port="ctbl_oa$idx_out_10x[1]" name="CTB1 OA$idx OUT 10x" group="CTB Connections"
        visible="`${hasBlock(&quot;pass[0].ctb[$idx]&quot;) &amp;&amp; hasVisibleOption(&quot;ctbl_oa$idx_out_10x[1]&quot;)}`"
        desc="CTB1 OA$idx OUT 10x pin" canBeEmpty="true">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="ERROR" reason="The pin Drive Mode parameter does not match expected.">
            <Fixed value="CY_GPIO_DM_ANALOG" />
          </Parameter>
        </Constraint>
      </ParamSignal>
    </Repeat>

    <Repeat count="8">
      <ParamSignal port="ptc_pads[$idx]" name="PTC/SAR PIN[$idx]" group="PTC and SAR Connections"
        visible="`${(hasBlock(&quot;pass[0].ptc[0]&quot;) || hasBlock(&quot;pass[0].sar[0]&quot;)) &amp;&amp; hasVisibleOption(&quot;ptc_pads[$idx]&quot;)}`"
        desc="PTComp and SAR ADC pin" canBeEmpty="true">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="ERROR" reason="The pin Drive Mode parameter does not match the expected.">
            <Fixed value="CY_GPIO_DM_ANALOG" />
          </Parameter>
        </Constraint>
      </ParamSignal>
    </Repeat>

    <Repeat count="4">
      <ParamSignal port="lppass_dout[$idx]" name="GPIO Digital Output PIN[$idx]" group="Connections" visible="`${hasVisibleOption(&quot;lppass_dout[$idx]&quot;)}`" desc="GPIO Digital Output pins" canBeEmpty="true">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
        </Constraint>
      </ParamSignal>
    </Repeat>

    <!-- TrigMux connections -->
    <Repeat count="8">
      <ParamSignal port="tr_lppass_out[$idx]" name="Trigger Output $idx" group="Trigger Output" visible="true" desc="Trigger Output $idx" canBeEmpty="true" >
      <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
        <Parameter id="DriveModes" severity="DEFAULT" reason="">
          <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
        </Parameter>
      </Constraint>
      <Constraint type="ACCEPT" targetLocation=".*" valid="true" />
    </ParamSignal>
    </Repeat>

    <Repeat count="4">
      <ParamSignal port="tr_lppass_in[$idx]" name="Trigger Input $idx" group="Trigger Input" visible="true" desc="Trigger Input $idx" canBeEmpty="true" >
      <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
        <Parameter id="DriveModes" severity="DEFAULT" reason="">
          <Fixed value="CY_GPIO_DM_HIGHZ" />
        </Parameter>
      </Constraint>
      <Constraint type="ACCEPT" targetLocation=".*" valid="true" />
    </ParamSignal>
    </Repeat>

    <!-- Vdda  -->
    <ParamBool  id="isPowerEnabled" name="isPowerEnabled" group="Internal" visible="`${debug}`" editable="false" desc=""
                default="`${isBlockUsed(&quot;srss[0].power[0]&quot;)}`" />
    <ParamString id="vdda" name="vdda" group="Internal" visible="`${debug}`" editable="false" desc=""
                 default="`${isPowerEnabled ? getExposedMember(&quot;srss[0].power[0]&quot;, &quot;vddaMv&quot;) : 1800}`" />

    <!-- local variables for the PTComp clock configuration -->
    <ParamString  id="pclkPtc"     name="pclkPtc"     group="Internal" visible="`${debug}`" editable="false" desc="" default="`${getBlockFromSignal(&quot;clock_ptc[0]&quot;)}`" />
    <ParamBool    id="pclkPtcOk"   name="pclkPtcOk"   group="Internal" visible="`${debug}`" editable="false" desc="" default="`${hasConnection(&quot;clock_ptc&quot;, 0) &amp;&amp; isBlockUsed(pclkPtc)}`" />
    <ParamBool    id="ptcOk"       name="ptcOk"       group="Internal" visible="`${debug}`" editable="false" desc="" default="`${isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ptc[0]&quot;)}`" />
    <ParamString  id="pclkPtcDst"  name="pclkPtcDst"  group="Internal" visible="`${debug}`" editable="false" desc="" default="PCLK_PASS_CLOCK_PTC"/>

    <!-- local variables for the DAC0/1 clocks configuration -->
    <Repeat count="2">
        <ParamString  id="pclkDac$idx"     name="pclkDac$idx"     group="Internal" visible="`${debug}`" editable="false" desc="" default="`${getBlockFromSignal(&quot;clock_dac[$idx]&quot;)}`" />
        <ParamBool    id="pclkDac$idxOk"   name="pclkDac$idxOk"   group="Internal" visible="`${debug}`" editable="false" desc="" default="`${hasConnection(&quot;clock_dac&quot;, $idx) &amp;&amp; isBlockUsed(pclkDac$idx)}`" />
        <ParamBool    id="dac$idxOk"       name="dac$idxOk"       group="Internal" visible="`${debug}`" editable="false" desc="" default="`${isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].dac[$idx]&quot;)}`" />
        <ParamString  id="pclkDac$idxDst"  name="pclkDac$idxDst"  group="Internal" visible="`${debug}`" editable="false" desc="" default="PCLK_PASS_CLOCK_DAC$idx"/>
    </Repeat>

    <!-- local variables for the Pump clock configuration -->
    <ParamString  id="pclkPump"     name="pclkPump"     group="Internal" visible="`${debug}`" editable="false" desc="" default="`${getBlockFromSignal(&quot;clock_pump_peri[0]&quot;)}`" />
    <ParamBool    id="pclkPumpOk"   name="pclkPumpOk"   group="Internal" visible="`${debug}`" editable="false" desc="" default="`${hasConnection(&quot;clock_pump_peri&quot;, 0) &amp;&amp; isBlockUsed(pclkPump)}`" />
    <ParamString  id="pclkPumpDst"  name="pclkPumpDst"  group="Internal" visible="`${debug}`" editable="false" desc="" default="PCLK_PASS_CLOCK_PUMP_PERI"/>
    <Repeat count="2">
        <ParamString id="resource_ctb0Oa$idx" name="resource_ctb0Oa$idx" group="Internal" visible="`${debug}`" editable="false" desc="" default="`${resource_pass}`.ctb[0].oa[$idx]" />
        <ParamBool   id="isUsed_ctb0Oa$idx"   name="isUsed_ctb0Oa$idx"   group="Internal" visible="`${debug}`" editable="false" desc="" default="`${isBlockUsed(resource_ctb0Oa$idx)}`"/>
        <ParamString id="resource_ctb1Oa$idx" name="resource_ctb1Oa$idx" group="Internal" visible="`${debug}`" editable="false" desc="" default="`${resource_pass}`.ctb[1].oa[$idx]" />
        <ParamBool   id="isUsed_ctb1Oa$idx"   name="isUsed_ctb1Oa$idx"   group="Internal" visible="`${debug}`" editable="false" desc="" default="`${isBlockUsed(resource_ctb1Oa$idx)}`"/>
    </Repeat>

<!-- LPPASS internal parameters -->
    <!-- Set inFlash to False, as this functionality is not supported now, see Drivers-19054 -->
    <ParamBool id="inFlash" name="Store Config in Flash" group="Advanced" default="false" visible="false" editable="false" desc="Controls whether the configuration structure is stored in flash (const, true) or SRAM (not const, false)." />

  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="The Power personality must be enabled for Autonomous Analog operation." condition="`${!isPowerEnabled}`" />
    <DRC type="ERROR" text="Autonomous Controller should be enabled and configured." condition="`${!isBlockUsed(resource_ac)}`" >
      <FixIt action="ENABLE_BLOCK" target="`${resource_ac}`" value="lppass_ac-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="High-Frequency Clock 9 shoud be in the next range [20 MHz - 80 MHz]." condition="`${clockHfIsConnected &amp;&amp; ((clockHfHz &gt; 80000000) || (clockHfHz &lt; 20000000))}`" />
    <DRC type="ERROR" text="Pump Clock is not reserved."     condition="`${!pclkPumpOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;HighSpeed&quot; &amp;&amp;
                                                                        ((isUsed_ctb0Oa0 &amp;&amp; (getExposedMember(resource_ctb0Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb0Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                      || (isUsed_ctb0Oa1 &amp;&amp; (getExposedMember(resource_ctb0Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb0Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                      || (isUsed_ctb1Oa0 &amp;&amp; (getExposedMember(resource_ctb1Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb1Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                      || (isUsed_ctb1Oa1 &amp;&amp; (getExposedMember(resource_ctb1Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb1Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                      || ((isBlockUsed(resource_dac_0) &amp;&amp; (((getExposedMember(resource_dac_0, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_0, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_dac_1) &amp;&amp; ((getExposedMember(resource_dac_1, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_1, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_dac_0) &amp;&amp; (getExposedMember(resource_dac_0, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_0, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_dac_1) &amp;&amp; ((getExposedMember(resource_dac_1, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_1, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW&quot;))))
                                                                      || (isBlockUsed(resource_adc) &amp;&amp; (((getExposedMember(resource_adc, &quot;sar_noninvInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_adc, &quot;sar_noninvInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_adc) &amp;&amp; ((getExposedMember(resource_adc, &quot;sar_invInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_adc, &quot;sar_invInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_ULTRA_LOW&quot;))))
                                                                      )}`" />
   <DRC type="ERROR" text="PTC Clock is not reserved."       condition="`${!pclkPtcOk  &amp;&amp; ptcOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;HighSpeed&quot; &amp;&amp; getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ptc[0]&quot;, &quot;ptc_sta_postProcessingIsEnabled&quot;)}`" />
   <DRC type="ERROR" text="DAC $idx Clock is not reserved."  condition="`${!pclkDac$idxOk &amp;&amp; dac$idxOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;HighSpeed&quot;}`" repeatCount="2"/>

   <DRC type="ERROR" text="Pump Clock should not be reserved for Low Power operating mode."      condition="`${pclkPumpOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;LowPower&quot;}`" />
   <DRC type="ERROR" text="Pump Clock should be 4 MHz in High Speed operating mode."             condition="`${pclkPumpOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;HighSpeed&quot; &amp;&amp; (clockHfHz / getExposedMember(pclkPump, &quot;divider&quot;)) != 4000000}`" />
   <DRC type="ERROR" text="PTC Clock should not be reserved for Low Power operating mode."       condition="`${pclkPtcOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;LowPower&quot;}`" />
   <DRC type="ERROR" text="DAC $idx Clock should not be reserved for Low Power operating mode."  condition="`${pclkDac$idxOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;LowPower&quot;}`" repeatCount="2"/>
   <DRC type="ERROR" text="DAC $idx Clock should not exceed 1 MHz in High Speed operating mode." condition="`${pclkDac$idxOk &amp;&amp; isBlockUsed(resource_ac) &amp;&amp; getExposedMember(resource_ac, &quot;opMode&quot;) eq &quot;HighSpeed&quot; &amp;&amp; (clockHfHz / getExposedMember(pclkDac$idx, &quot;divider&quot;)) &gt; 1000000}`" repeatCount="2"/>

  </DRCs>

  <ConfigFirmware>
    <!-- The LPPASS header file -->
    <ConfigInclude value="cy_autanalog.h" include="true" />
    <ConfigInclude value="cy_sysclk.h" include="true" />
    <ConfigDefine name="AUTANALOG_CLOCK_DIV_PRIO_HS_DEFAULT" value="`${cast(int64, getExposedMember(&quot;srss[0].clock[0].hfclk[9]&quot;, &quot;frequency&quot;) / 4096000.0 + 0.5)}`" public="true" include="`${getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0]&quot;, &quot;opMode&quot;) eq &quot;HighSpeed&quot;}`" />

    <!-- The LPPASS IRQ -->
    <ConfigDefine name="`${INST_NAME_lppass}`_lppass_IRQ" value="pass_interrupt_lppass_IRQn" public="true" include="true" />
    <ConfigDefine name="`${INST_NAME_lppass}`_fifo_IRQ" value="pass_interrupt_fifo_IRQn" public="true" include="true" />

    <!-- The Autonomous Analog configuration structure -->
    <ConfigStruct name="autonomous_analog_cfg"
                  type="cy_stc_autanalog_cfg_t"
                  const="`${inFlash}`"
                  public="true"
                  include="true">
      <Member name="prb" value="`${(isBlockUsed(resource_prb) ? &quot;&amp;&quot; . getExposedMember(resource_prb, &quot;INST_NAME_prb&quot;) . &quot;_cfg&quot; : &quot;NULL&quot;)}`"/>
      <Member name="ac" value="`${isBlockUsed(resource_ac) ? &quot;&amp;&quot; . getExposedMember(resource_ac, &quot;INST_NAME_ac&quot;) . &quot;_cfg&quot; : &quot;NULL&quot;}`"/>
      <ConfigArray name="ctb" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_ctb_$idx{0}, &quot;INST_NAME_ctb&quot;) . &quot;_cfg&quot; : &quot;NULL&quot;) }`" count="2" />
      </ConfigArray>
      <ConfigArray name="ptcomp" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ptc[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_ptc, &quot;INST_NAME_ptc&quot;) . &quot;_cfg&quot; : &quot;NULL&quot;) }`" count="1" />
      </ConfigArray>
      <ConfigArray name="dac" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].dac[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_dac_$idx{0}, &quot;INST_NAME_dac&quot;) . &quot;_cfg&quot; : &quot;NULL&quot;) }`" count="2" />
      </ConfigArray>
      <ConfigArray name="sar" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].sar[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_adc, &quot;INST_NAME_adc&quot;) . &quot;_cfg&quot; : &quot;NULL&quot;) }`" count="1" />
      </ConfigArray>
    </ConfigStruct>

    <!-- The Autonomous Analog State Transition Table structure -->
    <ConfigArray name="autonomous_analog_stt" type="cy_stc_autanalog_stt_t" const="`${inFlash}`" public="true" include="true" >
      <ConfigStruct name="empty" type="nested" const="false" public="true" repeatCount="64" include="`${isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ac[0].state[&quot; . $idx{0} . &quot;]&quot;)}`">
        <Member name="ac" value="`${&quot;&amp;&quot; . getExposedMember(resource_ac, &quot;INST_NAME_ac&quot;) . &quot;_stt[&quot; . $idx{1} . &quot;U]&quot;}`" />
        <Member name="prb" value="`${(isBlockUsed(resource_prb) ? &quot;&amp;&quot; . getExposedMember(resource_prb, &quot;INST_NAME_prb&quot;) . &quot;_stt[&quot; . $idx{1} . &quot;U]&quot; : &quot;NULL&quot;)}`" />
      <ConfigArray name="ctb" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ctb[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_ctb_$idx{0}, &quot;INST_NAME_ctb&quot;) . &quot;_stt[&quot; . $idx{2} . &quot;U]&quot; : &quot;NULL&quot;)}`" count="2" />
      </ConfigArray>
      <ConfigArray name="ptcomp" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].ptc[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_ptc, &quot;INST_NAME_ptc&quot;) . &quot;_stt[&quot; . $idx{2} . &quot;U]&quot; : &quot;NULL&quot;)}`" count="1" />
      </ConfigArray>
      <ConfigArray name="dac" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].dac[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_dac_$idx{0}, &quot;INST_NAME_dac&quot;) . &quot;_stt[&quot; . $idx{2} . &quot;U]&quot; : &quot;NULL&quot;)}`" count="2" />
      </ConfigArray>
      <ConfigArray name="sar" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${(isBlockUsed(&quot;pass[&quot; . inst_pass . &quot;].sar[&quot; . $idx{0} . &quot;]&quot;) ? &quot;&amp;&quot; . getExposedMember(resource_adc, &quot;INST_NAME_adc&quot;) . &quot;_stt[&quot; . $idx{2} . &quot;U]&quot; : &quot;NULL&quot;)}`" count="1" />
      </ConfigArray>
      </ConfigStruct>
    </ConfigArray>

    <!-- The Autonomous Analog initialization structure -->
    <ConfigStruct name="autonomous_analog_init"
                  type="cy_stc_autanalog_t"
                  const="`${inFlash}`"
                  public="true"
                  include="true">
      <Member name="configuration" value="&amp;autonomous_analog_cfg"/>
      <Member name="numSttEntries" value="sizeof(autonomous_analog_stt)/sizeof(autonomous_analog_stt[0U])"/>
      <Member name="stateTransitionTable" value="&amp;autonomous_analog_stt[0U]"/>
    </ConfigStruct>

    <!-- The Autonomous Analog clocks initialization -->
    <ConfigInstruction value="Cy_SysClk_PeriGroupSlaveInit(CY_MMIO_PASS_PERI_NR, CY_MMIO_PASS_GROUP_NR, CY_MMIO_PASS_SLAVE_NR, CY_MMIO_PASS_CLK_HF_NR);" include="true" purpose="INITIALIZE" />

    <ConfigInstruction value="Cy_SysClk_PeriPclkAssignDivider(`${pclkPtcDst}`, `${getExposedMember(pclkPtc, &quot;clockSel&quot;)}`);" purpose="INITIALIZE"
                       include="`${pclkPtcOk &amp;&amp; getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0]&quot;, &quot;opMode&quot;) eq &quot;HighSpeed&quot;}`" />

    <ConfigInstruction value="Cy_SysClk_PeriPclkAssignDivider(`${pclkDac$idxDst}`, `${getExposedMember(pclkDac$idx, &quot;clockSel&quot;)}`);" purpose="INITIALIZE" repeatCount="2"
                        include="`${pclkDac$idxOk &amp;&amp; getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0]&quot;, &quot;opMode&quot;) eq &quot;HighSpeed&quot;}`" />

    <ConfigInstruction value="Cy_SysClk_PeriPclkAssignDivider(`${pclkPumpDst}`, `${getExposedMember(pclkPump, &quot;clockSel&quot;)}`);" purpose="INITIALIZE" include="`${pclkPumpOk &amp;&amp; (getExposedMember(&quot;pass[&quot; . inst_pass . &quot;].ac[0]&quot;, &quot;opMode&quot;) eq &quot;HighSpeed&quot;) &amp;&amp;
                                                                                                                                                                ((isUsed_ctb0Oa0 &amp;&amp; (getExposedMember(resource_ctb0Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb0Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                                                                                                              || (isUsed_ctb0Oa1 &amp;&amp; (getExposedMember(resource_ctb0Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb0Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                                                                                                              || (isUsed_ctb1Oa0 &amp;&amp; (getExposedMember(resource_ctb1Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb1Oa0, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                                                                                                              || (isUsed_ctb1Oa1 &amp;&amp; (getExposedMember(resource_ctb1Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_OFF&quot; &amp;&amp; getExposedMember(resource_ctb1Oa1, &quot;power&quot;) ne &quot;CY_AUTANALOG_CTB_OA_PWR_ULTRA_LOW&quot;))
                                                                                                                                                              || ((isBlockUsed(resource_dac_0) &amp;&amp; (((getExposedMember(resource_dac_0, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_0, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_dac_1) &amp;&amp; ((getExposedMember(resource_dac_1, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_1, &quot;dac_referenceBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_REF_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_dac_0) &amp;&amp; (getExposedMember(resource_dac_0, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_0, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_dac_1) &amp;&amp; ((getExposedMember(resource_dac_1, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_dac_1, &quot;dac_outputBufferPower&quot;) ne &quot;CY_AUTANALOG_DAC_OUT_BUF_PWR_ULTRA_LOW&quot;))))
                                                                                                                                                              || (isBlockUsed(resource_adc) &amp;&amp; (((getExposedMember(resource_adc, &quot;sar_noninvInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_adc, &quot;sar_noninvInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_ULTRA_LOW&quot;))) || (isBlockUsed(resource_adc) &amp;&amp; ((getExposedMember(resource_adc, &quot;sar_invInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_OFF&quot;) &amp;&amp; (getExposedMember(resource_adc, &quot;sar_invInputBufferPower&quot;) ne &quot;CY_AUTANALOG_SAR_BUF_PWR_ULTRA_LOW&quot;))))
    )}`" />

  </ConfigFirmware>

</PersonalityTemplate>
