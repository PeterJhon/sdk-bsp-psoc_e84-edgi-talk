        {
            "name": "Launch PSOCE84 &&_MTB_RECIPE__TARGET_PROCESSOR_NAME&& (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&_MTB_RECIPE__JLINK_CFG&&",
            "interface": "&&_MTB_RECIPE__PROBE_INTERFACE&&",
            "serialNumber": "&&_MTB_RECIPE__PROBE_SERIAL&&",
            "preLaunchCommands": [
                "monitor sleep 2000",
                // Program via the hex file to get complete coverage
                "exec-file &&_MTB_RECIPE__HEX_FILE&&"
            ],
            "overrideRestartCommands": [
                "starti"
            ],
            // svdFile is optional, it can be very large.
            "svdFile": "&&_MTB_RECIPE__SVD_FILE_NAME&&",
            "breakAfterReset": true,
            "runToEntryPoint": "main",  // Specifies application entry point name where program will halt
            "preLaunchTask": "Build",
            "showDevDebugOutput": "none",
            "presentation": {
                "hidden": false,
                "group": "&&_MTB_RECIPE__TARGET_PROCESSOR_NAME&&"
            }
        },
        // When using 'attach', make sure your program is running on the board and that your
        // executable matches the image in the chip exactly, or else strange things can happen
        // with breakpoints, variables, etc.
        {
            "name": "Attach PSOCE84 &&_MTB_RECIPE__TARGET_PROCESSOR_NAME&& (JLink)",
            "type": "cortex-debug",
            "request": "attach",
            "cwd": "${workspaceFolder}",
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&_MTB_RECIPE__JLINK_CFG&&",
            "interface": "&&_MTB_RECIPE__PROBE_INTERFACE&&",
            "serialNumber": "&&_MTB_RECIPE__PROBE_SERIAL&&",
            "overrideRestartCommands": [
                "starti"
            ],
            // svdFile is optional, it can be very large.
            "svdFile": "&&_MTB_RECIPE__SVD_FILE_NAME&&",
            "breakAfterReset": true,
            "runToEntryPoint": "main",    // Specifies application entry point name for restart/reset
            "showDevDebugOutput": "none",
            "presentation": {
                "hidden": false,
                "group": "&&_MTB_RECIPE__TARGET_PROCESSOR_NAME&&"
            }
        },
        {
            "name": "Erase Device (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            // executable not needed but need some valid file to get the session to start
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&_MTB_RECIPE__JLINK_CFG&&",
            "interface": "&&_MTB_RECIPE__PROBE_INTERFACE&&",
            "serialNumber": "&&_MTB_RECIPE__PROBE_SERIAL&&",
            "overrideLaunchCommands": [
                "monitor reset",      // Perform pre-reset
                "monitor flash erase",
                "monitor reset"       // Perform post-erase reset
            ],
            "postStartSessionCommands": [
                "quit"
            ],
            "showDevDebugOutput": "none",
            "presentation": {
                "hidden": false,
                "group": "&&_MTB_RECIPE__TARGET_PROCESSOR_NAME&&"
            }
        },
                {
            "name": "Erase All (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            // executable not needed but need some valid file to get the session to start
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&_MTB_RECIPE__JLINK_CFG&&",
            "interface": "&&_MTB_RECIPE__PROBE_INTERFACE&&",
            "serialNumber": "&&_MTB_RECIPE__PROBE_SERIAL&&",
            "overrideLaunchCommands": [
                "monitor exec EnableEraseAllFlashBanks",
                "monitor reset",      // Perform pre-reset
                "monitor flash erase",
                "monitor reset"       // Perform post-erase reset
            ],
            "postStartSessionCommands": [
                "quit"
            ],
            "showDevDebugOutput": "none",
            "presentation": {
                "hidden": false,
                "group": "&&_MTB_RECIPE__TARGET_PROCESSOR_NAME&&"
            }
        },
        {
            "name": "Program (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            // executable not needed but need some valid file to get the session to start
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&_MTB_RECIPE__JLINK_CFG&&",
            "interface": "&&_MTB_RECIPE__PROBE_INTERFACE&&",
            "serialNumber": "&&_MTB_RECIPE__PROBE_SERIAL&&",
            "preLaunchCommands": [
                // Program via the hex file to get complete coverage
                "exec-file &&_MTB_RECIPE__HEX_FILE&&"
            ],
            "overrideLaunchCommands": [
                "monitor reset",      // Reset both core and the peripherals
                "monitor sleep 2000",
                "-target-download",
                "monitor reset",      // Reset via the reset pin
                "monitor go"
            ],
            "postStartSessionCommands": [
                "quit"
            ],
            "preLaunchTask": "Build",    // Set this to run a task from tasks.json
                                                        // before device programming
            "showDevDebugOutput": "none",
            "presentation": {
                "hidden": false,
                "group": "&&_MTB_RECIPE__TARGET_PROCESSOR_NAME&&"
            }
        }